<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>失恋了，就不再相信爱情了吗？</title>
      <link href="/post/10149709/"/>
      <url>/post/10149709/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><center><font color=#748D9A ><B>配乐《可不可以》</B></font></center><center><div class="audio"><audio controls preload><source src='https://npm.elemecdn.com/hexo-post-img/music/5.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div></center><p><P style="text-indent:2em;"><font color=#748D9A >最近网上有一个很火的讨论，<B>“什么是爱情，你还期待爱吗？”</B></font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >回答的网友很多，但结果却让人大吃一惊，因为大多数的回答都是不相信，不期待爱情。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >你曾经是否也有过这样的疑问，爱情究竟是什么？理想的爱情又是怎么样的？</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >关于爱情，每个人都有不同的看法。有人认为爱情是虚无缥缈的，也有人认为爱情是刻骨铭心的，那么你还期待爱情吗？</font><BR><BR></p><h1><center><font color=#BB7B58 ><B>01</B></font></center></h1><p><img src="https://img.huran.xyz/2022/01/25/wvNHsAd0.png" alt="1643095135119.png"></p><p><P style="text-indent:2em;"><font color=#748D9A >这天，小玲正躺在床上玩手机，突然读到一篇关于美好爱情的文章，文中甜甜的恋爱让她羡慕不已，于是她就将这篇文章转给了自己的好闺蜜小雪。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >小玲和小雪是大学同学，同时也是关系十分要好的闺蜜。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >刚上大一时，由于小雪人长的漂亮，而且多才多艺，于是刚开学不久，就引来许多男生的青睐。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >但是小雪总觉得这些男生好像差点什么，于是小雪拒绝了这些男生的表白。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A ><B>她在等，她在等那个最好的人，她相信爱情，她期待爱情。她希望有一个完美的人出现在她的生活中。</B></font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >日子一天天过去，直到有一天，小宇出现了，<b>他就像一个自带光环的人，在小雪眼里，他是那么完美，小雪觉得他就是自己的理想型。</b></font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >于是在舍友的推荐下，他们互加了好友，接着就是相互了解，每天聊天，约好一起出去玩，再后来他们就在一起了。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >小雪彻底坠入了爱河，他们每天见面，每天一起吃饭，一起散步，一起学习。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >小宇告诉小雪：他们要永远在一起。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >所有人都很羡慕他们的爱情，此刻的小雪觉得自己是最幸福的人。</font><BR><BR></p><h1><center><font color=#BB7B58 ><B>02</B></font></center></h1><p><img src="https://img.huran.xyz/2022/01/25/5oCIYG7W.png" alt="1643095386226.png"></p><p><P style="text-indent:2em;"><font color=#748D9A >然而，幸福来得快，去得也快。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >不久后，小雪渐渐的发现小宇不再像刚在一起时那样了。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >有时候小宇可以因为自己忙，一天都不和小雪见面，消息也从刚开始的秒回变成了现在的偶尔回复。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >这时，小雪还在安慰自己，或许小宇是真的太忙了吧。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >直到几天后，小雪在校园里看到小宇和另一个女生有说有笑走在一起时，她才明白最近的小宇为什么如此冷淡。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >回想起和小宇在一起的点点滴滴，她觉得自己的心都碎了。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >她走到小宇面前质问他为什么要这样做，小宇只是淡淡说了句：分手吧，我并不喜欢你。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A ><b>小雪对小宇说：曾经你让我觉得爱情很美好，然而现在你让我明白爱情也不过如此。</b></font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >看呐，小雪因为一个人而否定了爱情。</font><BR><BR></p><h1><center><font color=#BB7B58 ><B>03</B></font></center></h1><p><img src="https://img.huran.xyz/2022/01/25/MFaYWRNj.png" alt="1643095489529.png"></p><p><P style="text-indent:2em;"><font color=#748D9A >小雪也是一个相信爱情的人，可是爱情让她失望过，于是她再也不相信爱情，她认为爱情都是建立在容貌，利益上的，她觉得一见钟情不过是见色起意。她早已封心锁爱了。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >小雪点开了小玲转发的文章，看了文章。小雪说：“你还相信爱情，爱情这种虚无缥缈东西。”</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >小玲告诉小雪：“我还期待爱情，曾经的你虽然在爱情里失恋过，但是你应该懂得，与其将就的爱情不如等待那个对的人，遇见那个真正懂自己的人更重要。不要因为自己受过伤，就否定这个世界。”</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A ><b>是啊，或许有的人会经历一段不成功的爱情，但是我们依然要相信爱情，期待爱情。</b></font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >所有的经历都是功课，它会让你擦亮眼睛，它会让你成长。会让你更好接受下一段感情。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A ><b>爱情或许会迟到，但它永远不会缺席。</b></font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >我相信总有一天，你会遇见那个人，那个满眼都是你的人，那个可以在乎你所有小情绪的人。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >总有一天，会有一个人，为你奔赴而来，陪你过节、陪你看你喜欢的电影，陪你听你爱听的歌，陪你一起吃喜欢吃的东西，带你去你想去的地方，拍很多很多照片。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#748D9A >那个人会守护你，陪你去天涯海角，做你想做的事情，弥补你所有的遗憾，让你觉得人间值得。</font><BR><BR></p><center><font color=#515F8F ><B>爱情或许会迟到<br>但它永远不会缺席</B></font></center>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 人生百态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 人生百态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忽然公益图床 PicGo 上传插件的使用</title>
      <link href="/post/4ff77429/"/>
      <url>/post/4ff77429/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><div class="tip bolt"><p>PicGo 是可以通过插件支持第三方图床平台，我所搭建的图床是基于<code>lskypro</code>的，所以可以通过插件来实现通过PicGo上传到公益图床！</p></div><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>打开PicGo <font color="#FF0000">-&gt;</font> 插件设置 <font color="#FF0000">-&gt; </font>搜索lsykpro <font color="#FF0000">-&gt; </font>安装</p><p><img src="https://img.huran.xyz/2022/01/21/JGl8Yrxh.png" alt="1642742606344.png"></p><p>安装成功后<font color="#FF0000"> -&gt;</font> 图床设置 <font color="#FF0000">-&gt;</font> LskyPro Uploader<font color="#FF0000"> -&gt; </font>设置API和Token （Token获取方法请看:<a href="https://blog.huran.xyz/post/2313b382/">白嫖Twikoo评论插入图片功能</a>）<font color="#FF0000"> -&gt;</font> 确定或设为默认图床</p><p>Url：<a href="https://img.huran.xyz/api/upload">https://img.huran.xyz/api/upload</a></p><p><img src="https://img.huran.xyz/2022/01/21/tbEY1Uay.png" alt="1642742992697.png"></p>]]></content>
      
      
      <categories>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 图床 </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白嫖twikoo评论插入图片功能</title>
      <link href="/post/2313b382/"/>
      <url>/post/2313b382/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><div class="tip success"><p>公益图床：<a href="https://img.huran.xyz/">忽然的公益图床 (img.huran.xyz)</a></p></div><div class="timeline"><div class="timenode"><div class="meta"><p><p>2022-01-20 1.0.0 -&gt; 1.0.1</p></p></div><div class="body"><ol><li>给图床套了个CDN</li></ol></div></div></div><div class="tip warning faa-horizontal animated"><p>温馨提示：请务必将云函数版本和前端版本保持一致</p></div><div class="tip cogs faa-horizontal animated"><p>当前的前端版本为<code>1.4.15</code></p></div><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Twikoo评论相信很多人都在用，但是插入图片的功能仅限于7bu和腾讯云，腾讯云和7bu都是付费的。很显然不符合我们白嫖的精神。使用vercel搭建的twikoo是免费的，但是插入图片功能不能使用，因为如果你使用7bu的是需要付费购买账号的，而腾讯云只有是通过腾讯云搭建的才可以使用，但是通过腾讯云搭建的最害怕的就是被刷。</p><p>前些天在github上面冲浪的时候看到了一个图床的程序，尝试着搭建了，发现跟7bu的图床程序是一模一样的，甚至连api也是一样的。就动了点小心思 ”我是不是可以通过我搭建的图床api来用做twikoo的插入图片功能。“</p><h2 id="说干就干"><a href="#说干就干" class="headerlink" title="说干就干"></a>说干就干</h2><p>首先在我的图床创建一个自己的账号：<a href="https://img.huran.xyz/auth/register.html">注册 - 忽然的公益图床 (huran.xyz)</a></p><p><img src="https://img.huran.xyz/2022/01/20/7SgqkSGX.png" alt="20220120134747.png"></p><p>注册成功后登录你的账号，来到设置界面，复制你的<code>token</code></p><p><img src="https://img.huran.xyz/2022/01/20/aK1dAdWP.png" alt="1642657765627.png"></p><p>得到<code>token</code>后，前往博客的根目录，打开修改博客的主题配置文件<code>_config.butterfly.yml</code></p><p>找到twikoo的js文件，并替换成我修改后的js文件链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://unpkg.zhimg.com/huran@1.0.6/js/twikoo/dist/twikoo.all.min.js</span><br></pre></td></tr></table></figure><ul><li><img src="https://img.huran.xyz/2022/01/20/M0fs296v.png" alt="1642657936295.png"></li></ul><p>之后上传你的博客，随便进入一片文章，修改评论设置</p><p>将<code>IMAGE_CDN</code>修改为<code>7bu</code></p><p><code>IMAGE_CDN_TOKEN</code>修改为你刚才的<code>token</code></p><ul><li><img src="https://img.huran.xyz/2022/01/20/9PcY0zCJ.png" alt="1642658091805.png"></li></ul><p>之后就可以尽情的享受评论的插入图片功能啦</p><p><img src="https://img.huran.xyz/2022/01/20/UJDtPUQ0.png" alt="1642658179062.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> twikoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从喜欢到奔赴，要实打实的付出啊</title>
      <link href="/post/643f77c0/"/>
      <url>/post/643f77c0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><center><font color=#515F8F ><B>配乐《岁月神偷》</B></font></center><center><div class="audio"><audio controls preload><source src='https://unpkg.zhimg.com/hexo-post-img/music/4.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div></center><h1><center><font color=#BB7B58 ><B>01</B></font></center></h1><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.1.4/20220115095531.jpg" alt="图片"></p><p><P style="text-indent:2em;">小航特别钟情每件事开头的仪式感，2021年末，一本好看的计划本出现在桌前。<BR><BR></p><p><P style="text-indent:2em;"><font color=#FF4C41 ><B>“新的一年，应该给自己定些什么样的目标呢？”</B></font><BR><BR></p><p><P style="text-indent:2em;">小航想，他要经历几门高难度的课程设计，完成一次实习，年底还会迎来考研。<BR><BR></p><p><P style="text-indent:2em;">课表看起来不算很满，高年级的排课赋予他更大程度的自由。<BR><BR></p><p><P style="text-indent:2em;">小航列出来“健身”“英语口语”“竞赛”“阅读”这些关键词，然后发散性地想到：利用不太忙的时间练好英语，保持好每天读书的习惯，有空多去图书馆或健身房，反正不要总待在寝室……<BR><BR></p><p><P style="text-indent:2em;"><font color=#FF4C41 ><B>“最重要的是，改掉现在的这些坏习惯，新年要有新气象！”</B></font><BR><BR></p><p><P style="text-indent:2em;">小航脑中却突然闪过一个画面：2020的年末，也是在这桌前，也有一个新的计划本，现在这个本子已经收在杂物箱中……<BR><BR></p><p><P style="text-indent:2em;"><font color=#FF4C41 ><B>2021的那些计划呢？</B></font>小航想起，因为羡慕班长的一手好字，自己认真挑选了一本字帖，但是只写了几页纸没有继续；羡慕校园音乐节的吉他演出，自己也买了一个吉他和课程，但是最基本的谱子都还不会弹奏。<BR><BR></p><p><P style="text-indent:2em;">小航一直觉得自己是一个很有上进心的人，每一次被别人的一个好习惯、一项技能惊艳，都会心生羡慕，想要提升自己，<font color=#FF4C41 ><B>但是，为什么最后还是一事无成？</B></font><BR><BR></p><h1><center><font color=#BB7B58 ><B>02</B></font></center></h1><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.1.4/20220115095537.jpg" alt="图片"></p><p><P style="text-indent:2em;"><font color=#FF4C41 ><B>关于“羡慕”，小泽的理解是渴望成长，期待蜕变。</B></font><BR><BR></p><p><P style="text-indent:2em;"><font color=#FF4C41 ><B>但是在从“羡慕”到“奔赴”二者间，需要实实在在的付出。</B></font><BR><BR></p><p><P style="text-indent:2em;">那一年新年钟声敲响，好朋友一凡的年终回顾朋友圈让她又想起一个深藏心里多年的梦。翻看图集，一凡在学校文艺汇演上朗诵的照片格外醒目。<BR><BR></p><p><P style="text-indent:2em;">小泽是一个在公开场合不太能放得开的女生，她也形容自己“看起来就不太有气势”。<font color=#FF4C41 ><B>只有四下无人时，小泽爱拿起心爱的诗歌，最触动的篇章，绘声绘色地动情朗读。</B></font><BR><BR></p><p><P style="text-indent:2em;">每次看到朗诵者的表现，小泽总幻想自己也是其中的一员，<font color=#FF4C41 ><B>她的声线既能完满地融入群声中，又可以独特到让人听即入迷。</B></font><BR><BR></p><p><P style="text-indent:2em;">一凡是学校朗诵队的成员，小泽羡慕她每周参加校队，训练学习技巧，羡慕她有去各类文艺汇演的机会，穿着各式华丽的演出服，更羡慕她每一次演出都很完美，表现从容大气。<BR><BR></p><p><P style="text-indent:2em;">在小泽上高中时，也有广播台的老师挑中她作为队长组建一支朗诵队，<font color=#FF4C41 ><B>但是因为害怕登台，害怕每一次在排练时单独展示，很快就提出退队。</B></font><BR><BR></p><p><P style="text-indent:2em;">辗转反侧，小泽意识到如果年年这个时候都只能羡慕别人，那这个梦就会永久沉寂下去，成为遗憾。<BR><BR></p><p><P style="text-indent:2em;">鼓起勇气和一凡吐露后，一凡欣然引荐了学校的朗诵指导。<BR><BR></p><p><P style="text-indent:2em;"><font color=#FF4C41 ><B>“你的声音条件很好啊，先去广播台播音一个学期，练练胆子，之后再上台！”</B></font><BR><BR></p><p><P style="text-indent:2em;">指导老师认为公开表演是可以训练的，<font color=#FF4C41 ><B>只要对朗诵有一股热情，慢慢来总可以做好。</B></font><BR><BR></p><p><P style="text-indent:2em;">小泽惊奇地发现，原来她所羡慕的事情，从不会与她错过，但也不会直白地夹道欢迎，<font color=#FF4C41 ><B>也许仅仅是多一个举动，多一番争取，结果就会不一样。</B></font><BR><BR></p><h1><center><font color=#BB7B58 ><B>03</B></font></center></h1><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.1.4/20220115095542.jpg" alt="图片"></p><p><P style="text-indent:2em;"><font color=#FF4C41 ><B>你怎么去理解羡慕呢？</B></font><BR><BR></p><p><P style="text-indent:2em;">小时候我们羡慕别的小朋友嘴里的糖、手上的玩具，但长大以后才发现，<font color=#FF4C41 ><B>真正能让自己心生羡慕的，一定是一件自己觉得了不起的事情。</B></font><BR><BR></p><p><P style="text-indent:2em;">不管别人怎么说，我们都必须坚信，<font color=#FF4C41 ><B>拥有一个目标，无论花费多少精力、途经多少曲折，只要是自己认定的事情都值得。</B></font><BR><BR></p><p><P style="text-indent:2em;">我们忌讳的不是“狼子野心”的远大征途，而是“眼高手低”的不匹配。只知羡慕是远远不够的，羡慕的心理可以进化为强大的决心，<font color=#FF4C41 ><B>但如果不采取任何行动，我们就会陷入各种“后悔药”式的假想。</B></font><BR><BR></p><p><P style="text-indent:2em;">我们习惯以“年”为时间计量单位，对于过去的年份常常报以一种“过去式”的态度，仿佛那些半途而废和知难而退都可以既往不咎。<BR><BR></p><p><P style="text-indent:2em;">但是，期待新年到来的同时，不强大的行动力仍然是“隐患”。<BR><BR></p><p><P style="text-indent:2em;">你是不是也曾和小航一样，常常羡慕，很少行动，转而这些情绪又变成了旧一年的不顺心“债务”，<font color=#FF4C41 ><B>年复一年，期待得到新年的“善待”？</B></font><BR><BR></p><p><P style="text-indent:2em;">相信自己，在新年里，把刷到别人年终总结时萌生的羡慕，前一年因为半途而废引发的悔意都积攒起来，<font color=#FF4C41 ><B>新的一年多一步行动，结果一定会大不相同的！</B></font><BR><BR></p><center><font color=#515F8F ><B>不管别人怎么说<br>我们都必须坚信<BR>拥有一个目标<BR>无论花费多少精力<BR>途经多少曲折<BR>只要是自己认定的事情都值得</B></font></center>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 人生百态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 人生百态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我这一生最大的希望，就是ta能平安喜乐</title>
      <link href="/post/21742442/"/>
      <url>/post/21742442/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><center><font color=#9CA156 ><B>配乐《陪我长大》</B></font></center><center><div class="audio"><audio controls preload><source src='https://unpkg.zhimg.com/hexo-post-img/music/3.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div></center><h1><center><font color=#9CA156 ><B>01</B></font></center></h1><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.1.3/20220114144005.jpg" alt="图片"></p><p><P style="text-indent:2em;"><font color=#9CA156 >你家有没有那样的老人，他们牵过你稚嫩的手，给你买你眼巴巴盼着的糖葫芦，在挨打的时候把你护在身后，在害怕的时候把你抱在怀里，轻拍着安慰你，偷偷把自己省吃俭用攒下来的钱塞给你。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 >她的裤脚卷得并不齐整，腿脚弯曲的时候略显吃力，带着术后特有的僵直，小心翼翼地想要迈过门槛，却还是被绊了一下。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 >我的心瞬间提了起来，冲过去想要扶住她，所幸在踉跄后稳住了身形，我松了口气，后知后觉才意识到，奶奶已经年纪大了。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 >我是奶奶带大的，小时候经常跟奶奶一起出门，走路对我而言是一件很无趣的事。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 >“听说人闭上眼睛走路就会失去平衡。”</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 ><B>我像做游戏一样遵循着自己的游戏规则，牵着奶奶的手的时候偷偷闭上眼睛走，她走得很慢，我把手握得很紧，走得很安心，即使眼前一片漆黑，我也不害怕前方有什么阻碍我前进。</B></font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 >在奶奶的陪伴下，我忘却了黑夜的可怕，走过无数个清晨和黄昏。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 >盼啊盼，我终于盼到小时候梦寐以求的长大了。当时间的刻度尺被拉长，丈量出岁月的痕迹，她的步履开始蹒跚，发上染霜。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 >她一直在目送我远行。</font><BR><BR></p><h1><center><font color=#9CA156 ><B>02</B></font></center></h1><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.1.3/20220114144012.jpg" alt="图片"></p><p><P style="text-indent:2em;"><font color=#9CA156 >那是一场猝不及防的大暴雨，好多小朋友在学校门口滞留，等着爸妈来接。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 >手心里的书包带被我攥得紧紧的，看着毫无停歇之意的暴雨，看着我的同学们一个个被接走，看着越来越黑的天色，心里的茫然和无措就像地上被踩得脏乱的地板。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 >我低着头看脚尖，脏水在刚才的拥挤中溅到了我的鞋子，它脏兮兮的，我越发难过。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 >家里离学校好远好远，要走半个多小时。我其实很害怕，有种独自被落下的尴尬和委屈。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 >眼泪在眼眶里打转转，却又强忍着不想落下，在这里哭的话，也太丢人了吧。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 >然后我抬起头，想让眼泪倒着流回去。就在这个抬头的瞬间，我看到了一个身影，她撑着一把大大的伞，蹒跚着顶着大雨一步步向我走来。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 >不知怎么形容我那一刻的心情，我的眼泪终于也忍不住了，意识到原来我也被人深深爱着。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 >如果可以的话，我真的希望时间慢点走。我还想握紧她的手闭着眼睛往前走，还想在电闪雷鸣的阴雨天躲进她的被窝里抱着她的胳膊睡觉，还想在她面前得意洋洋地扬起我第一名的成绩单求表扬。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 ><B>那些偷偷溜走的时光里，有着她最温柔最温暖的爱意。</B></font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 >我想奶奶陪我一直走下去，陪我去看更远更广阔的风景。我知道在她的眼里我一直是个小孩子，我像小孩子一样很依赖她，但我也想快快长成一棵树，成为她的依靠，为她遮挡风雨。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#9CA156 ><B>“我这一生最大的希望就是她能平安喜乐，伴我长久。”</B></font><BR><BR></p><center><font color=#BB7B58 ><B>我这一生最大的希望<br>就是她能平安喜乐<BR>伴我长久</B></font></center>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 人生百态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 人生百态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后来，我只在梦里见过你</title>
      <link href="/post/291ad217/"/>
      <url>/post/291ad217/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><center><font color=#3B6583 ><B>配乐《如果有来生》</B></font></center><center><div class="audio"><audio controls preload><source src='https://unpkg.zhimg.com/hexo-post-img/music/2.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div></center><h1><center><font color=#3B6583 ><B>01</B></font></center></h1><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.1.1/20220114141759.png" alt="图片"></p><p><P style="text-indent:2em;"><font color=#3B6583 >前两天天气突然降温，和同事一起回家时，路上还有很多积雪。路面结冰变得很滑，大街上很多人都走得很急，想要赶紧回家取暖。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 >同事突然停下了脚步，从怀里掏出手机，拍地上的雪人、拍粘满雪花的树、拍结了冰变得很滑的路。其实她是个很怕冷的人，平时在家里都要盖两层被子，可是那个时刻，冷好像也不重要了。 </font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 >她紧缩着脖子，把手蜷在袖口里哆哆嗦嗦地拍照，在冷风中瑟瑟发抖，但是脸上却挂着笑。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 ><B>后来聊天才知道，同事拍这些照片，是想要分享给一个很想念，却联系不到的人——她的父亲。 </B></font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 >她说，以前她遇到困难的时候，都会习惯性地给父亲打电话，和他絮絮叨叨说一会儿自己的烦恼。虽然父亲帮不上多少忙，但是她每次说完，心里都痛快很多，觉得充满了力量。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 >自从父亲去世以后，她就保留着和父亲的聊天记录，每当想念他的时候，就会拿起手机看上两眼。<B>所以现在，同事还保持着这个习惯，每到下雪都会拍很多照片。</B></font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 >只是可惜，父亲再也看不到了。</font><BR><BR></p><h1><center><font color=#3B6583 ><B>02</B></font></center></h1><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.1.1/20220114141746.jpg" alt="图片"></p><p><P style="text-indent:2em;"><font color=#3B6583 >记得之前一个年前的夜晚去朋友家里做客，她的父亲买了很多苹果回来。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 >朋友原以为那是父亲为招待亲朋买的水果，但没有想到，拿过袋子打开一看，却是一袋子有点疤痕的苹果。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 >她跟父亲抱怨这苹果卖相一般，吃起来口感也不怎么样，嫌弃父亲挑苹果的眼光太差。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 ><B>但他的父亲解释说，那个卖苹果的老奶奶，长得很像他的母亲，一样有点驼背，鬓角的头发也一样有些花白。</B>看到老奶奶坐在马路边，双手被冻得通红，还在费力地摆放着苹果，就不忍心，买了五斤。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 ><B>他只是很想念他的母亲。</B></font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 >有的人因为错过和亲人的最后一面而后悔；有的人因为没有让自己的外婆看到自己的成就而遗憾；<B>也有的人，对已经不在人世的家人，有一肚子想要说的话，可是也只能对着旧手机和老照片，暗自发呆，默默流泪。</B></font><BR><BR></p><h1><center><font color=#3B6583 ><B>03</B></font></center></h1><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.1.1/20220114141753.jpg" alt="图片"></p><p><P style="text-indent:2em;"><font color=#3B6583 ><B>我们都是在失去后，才懂得日子很短，亲情很贵。</B>原本以为，我们会吃很久家人做的饭，听很久爸爸的呼噜声，忍受很长时间妈妈的唠叨。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 >可是，也许有一天，在一个普通平常的日子里，某个不起眼的清晨或午后，亲人就突然离去了，这样的日子也就终结了。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 >我们站在与他们不会再产生交集的时间节点里，回望着过去的时光。<B>那一瞬间才猛然惊觉，原来，世界上最好的房子是家，最好的厨师是父母，最好的饭菜是我们陪他们一起吃过的寻常晚饭。</B></font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 >所以，珍惜与亲人在一起的日子吧，那是世上最温馨的时刻。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 >即便那个至深至爱的人，已经离我们远去，我们依旧要带着曾经的温暖与回忆勇敢前进，将他们曾经对我们的期许，化为抵御困难与构筑未来的不竭力量。</font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 >世上没有融不化的雪，但总会隐藏着一片雪，没有融化，也永远不会融化。 </font><BR><BR></p><p><P style="text-indent:2em;"><font color=#3B6583 ><B>愿你能始终带着心底的思念与温暖，过得热气腾腾，活得简单幸福。</B></font><BR><BR></p><center><font color=#BB7B58 ><B>愿你能始终带着<br>心底的思念与温暖<BR>过得热气腾腾<BR>活得简单幸福</B></font></center>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 人生百态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 人生百态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我们还能再见面吗</title>
      <link href="/post/fb2a0f7e/"/>
      <url>/post/fb2a0f7e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><center><font color=#BB7B58 ><B>配乐《岁月神偷》</B></font></center><center><div class="audio"><audio controls preload><source src='https://unpkg.zhimg.com/hexo-post-img/music/1.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div></center><h1><center><font color=#BB7B58 ><B>01</B></font></center></h1><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.1.2/20220114142806.jpg" alt="图片"></p><center><font color=#BB7B58 ><B>● 离别是人生常态 ●</B></font></center><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >小的时候不明白，幼稚地认为我身边的人，会像童话故事一样，都可以长长久久幸福地在一起，<B>长大了以后才知道，大多数人只能陪你走过一段路。</B></font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >人走茶凉，离散无常。匆匆一生，一个人来，一个人走。</font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >我也是在群里和小姐妹聊天的时候才知道朋友突然请假回了家，停学两周。私下询问，是家里出了事。<BR><BR></font><P style="text-indent:2em;"><font color=#BB7B58 >能停学回家多半事不小，八九不离十是哪位长辈离去了，但我没想到一天之间竟走了两位，其中一位还是朋友的妈妈。一时之间话梗在喉咙，看着手机键盘，不知道说什么好。</font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >上次见阿姨的时候还是两年前，一手端着水果盘，另一只手招呼我们：“妮妮们，过来吃水果呀！” 温柔而亲切。而如今像电视剧般十分的突然，但不得不承认，这就是现实。</font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 ><b>离别亲人的痛，触不到，摸不着。是一种长久不散的无可奈何，空虚至极的无能为力。恍惚间日子如常，但下一秒脱口而出的称呼又能使整个人彻底清醒。</B></font><h1><center><font color=#BB7B58 ><B>02</B></font></center></h1><img src="https://unpkg.zhimg.com/hexo-post-img@1.1.2/20220114142815.jpg" /><center><font color=#BB7B58 ><B>● 多一点联系 ●</B></font></center><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >我在外省上学，开学从机场打车去学校，开车的司机是个很实在的叔叔，和我爸爸的年纪相仿，这一聊就聊深了，叔叔有个在本地上班的女儿，都在同一个城市，却一个月都见不着一回。</font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >“我跟你说这个姐姐啊，咱就在一个城市里，我有时候跑这滴滴还开车到她公司楼下，打电话她就说忙呀，见也见不着一面。”</font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 ><B>我想女儿呀，又怕耽误她工作，见不着啊，见不着……”</B></font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >其实现在的年轻人大多都是这样，明明可以用少量的时间通过电话线传递思念，却不愿意按下“呼叫”的快捷键。即使是微信上的聊天也很少。</font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >我刚上大学的那个时候，半个月不给家里打一次电话。不是忙，也不是不想家，但就是拿起手机不会去打电话问平安，直到妈妈主动给我打电话才会聊上半几个小时。</font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >而父母对子女的思念又总是不愿直言表露的。比如想女儿却不敢打扰的司机师傅，又比如在家偷偷抹眼泪却不会告诉我的妈妈。</font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >他们每次唠叨起日常的生活，喋喋不休。<B>“平时要多喝水，冬天记得穿保暖，吃东西不要挑，不要靠不吃饭减肥，不要熬夜……”</B></font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >近一个小时的聊天也只不过是想说一句说不出口的“女儿，妈想你了”。仿佛父母本就应该是要比儿女更加隐忍的。</font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >前年回老家，跟爸爸回村里看望奶奶，老人家坐在炕上有一句没一句的和我们唠嗑，说的都是些家常小事，昨个张家长，今儿个李家短，想起啥事说啥事，就连家里的小羊羔爱踢围栏也成了聊天内容。</font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >从老家回来的第二天，奶奶就去世了。一朝一夕，便一墓相隔。</font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >现在想来，当时说啥不重要，老人也不过是想多说几句，多看几眼罢了。　</font><BR><BR><h1><center><font color=#BB7B58 ><B>03</B></font></center></h1><img src="https://unpkg.zhimg.com/hexo-post-img@1.1.2/20220114142823.png" /><center><font color=#BB7B58 ><B>● 多一点耐心 ●</B></font></center><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >“树欲静而风不止，子欲养而亲不待”是从小学写作文开始就背住的话，但等真正明白其中意味的时候往往都已留了遗憾。</font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >自此以后，我开始耐心地听父母一发就是至少30秒的语音，会把聊天语音时不时的添加到微信收藏夹里，每个星期也会给家里打三次电话，唠嗑日常。</font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >到了大多数人谈恋爱的年纪，妈妈总说以后要找一个疼我的爱我的人共度余生，我有次幼稚的说不要，和她开玩笑“一个戒指换你二十多年的光阴，有这个道理？”</font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 ><B>她也就笑笑，把我的手拉过来握着“你过得好就是道理呀！”</B></font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 >我们总是喜欢关注男女之间的爱情，记得对方的星座，对方的喜好，可每每提及父母的时候却连他们最喜爱吃的菜都要思考很久。<BR><BR></font><P style="text-indent:2em;"><font color=#BB7B58 ><B>其实大多数人的一生，陪伴自己最久最牢固的往往不是爱情。前半生，父母拿几十年陪你成长，后半生你又花几十年陪子女成长。</B></font><BR><BR><P style="text-indent:2em;"><font color=#BB7B58 ><B>人生这条路总归是亲情更疼惜你的。而我们唯一能做的，就是珍惜。所以啊，在还有人听的时候，大胆地说想说的话，勇敢地去表达自己的爱。</B></font><BR><BR><center><font color=#BB7B58 ><B>人生这条路<br>总归是亲情更疼惜你<BR>而我们唯一能做的<BR>就是珍惜！</B></font></center>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 人生百态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 人生百态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N卡A卡连发新款，1599元起只为玩家而来</title>
      <link href="/post/89c858b4/"/>
      <url>/post/89c858b4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>昨天夜里 CES 2022 国际消费类电子产品展览上，不少科技圈龙头企业都展示了自家新款技术产品和未来规划。<br>显示器、CPU、显卡、汽车、电视机……<br>看点实在太多，今天我们先来聊聊大家心心念念很久的显卡。<br>Nvidia 是否知道玩家真正需要的是能买到的实体显卡？从它精准的刀法来看，似乎并没有醒悟。<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106215858.jpg" alt="20220106215858.jpg"><br>昨晚的主题演讲中，Nvidia 又双叒叕带来新的空气系列产品，一次性 4 款，涵括台式机和笔记本。<br>从甜品卡 RTX 3050 到新的性能巨兽 RTX 3090Ti。<br>先来看 RTX 3050，可以说当今世界最迫切需要的就是价格实惠的显卡了。<br>新款 3050 售价创造了 RTX 显卡的「史低」，<strong>国行售价 1899 元起，本月 27 日上市。</strong><br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106215912.jpg" alt="20220106215912.jpg"><br>虽然便宜，但 RTX 3050 包含所有 30 系显卡的功能，包括实时光追、DLSS 和 Reflex 等。<br>基本规格方面，RTX 3050 基于安培核心（GA106-150），2560 个 CUDA，<strong>8GB GDDR6 显存，</strong>128bit 位宽，功耗 130W。<br>性能上，着色单元单精度浮点为 9T，光追单元算力 18T，AI 单元（Tensor）算力 73T。<br>单从着色浮点来看，比 RTX 2060（6.5T）提升了 <strong>38%。</strong><br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106215924.jpg" alt="20220106215924.jpg"><br>Nvidia 表示目前有 <strong>75% 的玩家</strong>仍然在使用上一代 <strong>GTX</strong> 显卡（玩家难道不想升级吗），现在是时候享受光追和 DLSS 加持下的游戏体验了。<br>在 DLSS 技术加持下，3050 在主流 1080P PC 游戏中的帧数可轻松稳定在<strong>60FPS+</strong>，完全取代钉子户 GTX 1650 级别产品。<br>再来看看 AMD 这边，AMD 昨晚也发布了 1 张低预算显卡，RX 6500XT，售价约 <strong>1599 元</strong>起。<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106215940.jpg" alt="20220106215940.jpg"><br>该显卡采用 Navi24 GPU，6nm 工艺，拥有 1024 个流处理器，<strong>4GB GDDR6 显存，</strong>带宽 128GB/S，TDP 107W，加速频率可达 2.6GHz，内建 16 组 CU（1024 个流处理器）和光追单元，16MB 无限缓存。<br>和 RTX 3050 一样，RX 6500XT 的定位一样是 <strong>1080P 流畅游戏，</strong>AMD 表示《使命召唤：先锋》、《死亡循环》与《孤岛惊魂 6》均可流畅运行。<br>从基准测试来看，RX 6500XT 性能超过了 RX 570 和 GTX 1650，并且售价比二手 1650 还便宜。<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106220000.jpg" alt="20220106220000.jpg"><br>虽然 RTX3050 游戏体验多半要比 RX 6500XT 更好，但真正值得关注的是什么？<br>RX 6500XT 只有 <strong>4GB 显存，</strong>而 RTX 3050 则有 <strong>8GB。</strong><br>一般来说显存是越来大越好，但考虑到两款都是入门级显卡，在 1080 分辨率下 3050 翻倍显存能带来多少收益，在实际测试前我们不得而知。<br>但有一点可以肯定的是，6500XT 的 4GB 显存勾不起以太坊矿工的兴趣，而 3050 的廉价的 8GB 显存对矿工来说简直是白送。<br>不过 Nvidia 表示供货有惊喜，让我们拭目以待吧。<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106220016.jpg" alt="20220106220016.jpg"><br>接下来看看另一个极端， RTX 3090Ti。<br>RTX 3090 的性能已经是消费级显卡的天花板了，RTX 3090Ti 直接把天花板砸了个窟窿。<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106220029.jpg" alt="20220106220029.jpg"><br>3090 Ti 提供 40T 着色单元算力、78T 光线追踪算力和 320T AI 单元算力。<br>这些数字是什么意思呢？小淙横竖睡不着，仔细看了半夜，才从字缝里看出字来，满篇都写着两个字是「商用」！<br>对于这种显卡擅长的创作和生产工作负载，显存非常重要。<br>RTX 3090Ti 仍然配备了巨大的 24GB GDDR6X 内存，但速度更快——在宽 384 位总线上达到惊人的 21Gbps，每秒 1TB 的最大内存带宽。<br>之前小淙就说过 3090 是为生产用途准备的，1.2W 元的售价对于玩家来说太过不合理。而 RTX 3090Ti 更是如此。<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106220100.jpg" alt="20220106220100.jpg" style="zoom: 25%;" /><br>Nvidia 没有透露 RTX 3090Ti 的售价，表示会在本月晚些时候公布更多细节。</p><p>另外 Nvidia 还升级了笔记本显卡：RTX 3070Ti 和 RTX 3080Ti。<br>RTX 3080Ti 拥有 16GB GDDR6 显存，Nvidia 承诺 3080Ti 的性能将超过上一代 RTX Titan 台式机显卡，能够在 1440P 分辨率下提供 120Hz 输出。<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106220114.jpg" alt="20220106220114.jpg"><br>不过关于 RTX 3070Ti 并没有透露更多规格，只是说这款性能是上一代 RTX 2070 笔记本显卡的 1.7 倍，能在 1440P 分辨率极限画质下达到 100 帧。</p><p><img src="https://unpkg.zhimg.com/hexo-post-img/20220106220137.jpg" alt="20220106220137.jpg"><br>两款显卡都将在下月 1 号推出，预计搭载这两款显卡的笔记本售价将在 2W 元以上。</p><p><img src="https://unpkg.zhimg.com/hexo-post-img/20220106220200.jpg" alt="20220106220200.jpg"><br>2022 年一到，等等党们是打算找机会下山还是等等下一代显卡呢？</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我在抖音卖红包封面，月入百万</title>
      <link href="/post/3f2f75b/"/>
      <url>/post/3f2f75b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="红包封面，月入百万？"><a href="#红包封面，月入百万？" class="headerlink" title="红包封面，月入百万？"></a><font color="#FF0000">红包封面，月入百万？</font></h2><p><strong>春节临近，红包封面又再一次抢手起来。作为去年的“暴利灰产”，红包封面在今年依然上演了疯狂时刻。</strong><br><strong>​</strong></p><p>有 700 多万粉丝的抖音博主汤圆酱，在去年 12 月初悄悄上线了微信红包封面。根据其首页显示，一张售价 9.8 元的封面销量已超过 15 万份，而卖的最火的十二星座红包封面短短 10 天就突破了 15 万，几乎每分钟就有 10 个人购买。<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106204150.jpg" alt="20220106204150.jpg"><br><strong><br>如果说这一数据真实有效，那仅仅是最高销量的一个链接交易额就已经轻松突破百万。</strong></p><hr><p>不仅仅是这些社交媒体平台的博主，很多淘宝商家也闻风而动，推出“虎年祝福”等封面设计。一般情况下，普通的静态红包单价普遍在 3 元左右，动态红包封面则能够卖到 10 元以上。<br>​</p><p>事实上，自从 2019 年开始微信官方对于企业用户开放定制红包封面功能之后，每年大家都开始抢不同品牌和明星的红包封面，热闹程度一点也不亚于淘宝集五福。<br>​</p><p>2020 年 11 月份微信再一次将红包封面开放给个人设计者，于是大家玩的更欢了，也直接促成了一波爆发。<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106204227.jpg" alt="20220106204227.jpg"><br>而红包封面对于各大品牌方来说也是一个低成本圈粉的好机会，根据封面每个 1 元的定价相当于品牌方只需要较低的成本，就能够吸引大量的微信用户长时间聚集在自己的公众号进行积极活动。</p><p>可以说微信红包封面早已通过各种各样的出圈形式在微信生态中“大杀四方”，也让传统的红包文化有了新玩法。</p><h2 id="红包封面，究竟有多暴利？"><a href="#红包封面，究竟有多暴利？" class="headerlink" title="红包封面，究竟有多暴利？"></a><font color="#FF0000">红包封面，究竟有多暴利？</font></h2><p>在这个由 1 块钱撬动的流量风口之下，品牌方、创作者和各种平台店铺及博主都是受益者。<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106204348.jpg" alt="20220106204348.jpg"><br>对品牌方来说，即将到来的春节各种红包大战无疑是放大宣传效果的推进器。</p><p>定制红包封面可以添加 logo 和自定义选项，而各行业品牌都可以借助封面向 12 亿微信用户来展示自身的品牌文化和理念。例如去年迪士尼和古驰的主题红包封面，给官方账号带来了一波强势引流。<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106204404.jpg" alt="20220106204404.jpg"><br><strong>如果我们在淘宝上输入“微信定制红包封面”，会跳出很多售卖红包封面的商家，价格基本在 10-20 元不等，而越来越近的春节也让淘宝的红包生意蒸蒸日上。</strong><br>有店铺仅仅上线了微信定制红包封面这一款产品，定价在 8.8-78 元不等，月销量就已经突破 5 万元，根据销量最高的 8.8 元促销款来计算单月销售额高达 44 万。<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106204425.jpg" alt="20220106204425.jpg"><br>不仅如此，有 700 多万粉丝的抖音博主汤圆酱其一张 9.8 元的红包封面销量已经超过 15 万份，并且仍然以每天卖出 1 万多份的速度在增长。即便是紧随其后的动漫系列销量在一周的时间之内也从 2.2 万飙升至 12.9 万，两款红包封面的销售额加起来已经创造了数百万的财富。</p><p>不过因为微信定制的红包封面有效期一般只有三个月，很多用户对于其定位就是“可重复消耗品”，再加上本身并不高的售价，虽然有下架风险，但也有不少用户会重复购买。</p><p><strong>就目前来看，微信定制红包封面确实延伸出了庞大产业链，从设计到创作再到最终的出售环环相扣，各环节都有定位不同的“变现者”。</strong></p><p>据了解，已经有不少设计师针对个人和企业推出了微信红包封面的设计业务，有些设计师仅一个封面收费就高达 999 元。</p><h2 id="以赠送之名，行交易之实"><a href="#以赠送之名，行交易之实" class="headerlink" title="以赠送之名，行交易之实"></a><font color="#FF0000">以赠送之名，行交易之实</font></h2><p>虽然微信红包封面开启了个人定制功能，但较高的申请门槛依然让很多人望而却步，再加上很多用户手速不够快根本抢不到免费封面，因此就只能上各大平台购买现成的。<br>​</p><p>常见的是买表情包送红包封面序列号，作为一种变相买卖，很多商家都会在店铺写明“本店不出售任何封面”。<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106204459.jpg" alt="20220106204459.jpg"><br>在淘宝平台直接搜索关键词“红包封面”，价格普遍在 2-20 元之间不等，10 元左右居多。销量过万的店家有接近 10 个，更多的是以卖表情包为由来销售红包封面。</p><p><strong>看似简单的封面，有些人靠这个已经实现了月入百万的“小目标”据报道，关于红包封面的产业链大致包含三类角色：资质提供方、封面制作方和销售方。</strong></p><p>由于制作封面需要个人或企业认证的视频号，越临近春节淘宝上就越会出现更多的办理该认证业务的商家。</p><p>一个月销量超过 1000 的商家表示：“买家在注册视频号之后我们通常会提供两种认证服务，首先是企业认证需要自己提供营业执照，第二种就是个人职业认证，主要是演艺经纪人等。”<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106204522.jpg" alt="20220106204522.jpg"><br>有了认证视频号就可以进入开放平台制作封面，而微信对封面图片原创性要求也很高，审核时间一周到一个月不等，这也就意味着制作方绝不能随便找图片放上去。</p><p>于是产业链下一层就此诞生，同样是在淘宝会有商家提供原创红包封面设计，500 元一张，并且保证有 80%的通过概率。即便是不幸被驳回，商家也会提供经验总结和解读最新的平台政策等。<br>​</p><p>最后就是销售方，直接面对消费者和各种热门渠道，如当下极为火爆的抖音、快手、闲鱼、淘宝等都成为封面卖家的推广渠道。<br>​</p><p>不仅如此，很多卖家甚至还想出了五花八门的玩法。有人专门制作小程序，消费者购买之后可以进行转盘抽奖从而有机会抽取到其他的封面，这种形式不仅调动了消费者的积极性，还在很大程度上吸引人们反复回购。</p><h2 id="与规则赛跑"><a href="#与规则赛跑" class="headerlink" title="与规则赛跑"></a><font color="#FF0000">与规则赛跑</font></h2><p>微信红包封面，一头连着品牌方，另一头连着靠微信“吃饭”的中小卖家。对于商业化向来谨慎的微信来说，不仅要有限度的向品牌方开放资源，同时还要制定各种规则，防范灰色产业链的形成。<br>​</p><p>诞生于 2019 年的微信红包封面，最初仅仅是为企业用户内部免费提供，一旦员工离职则无法再使用。而到了 2020 年初该功能才面向非企业用户开放，但也需要定向赠予。<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106204553.jpg" alt="20220106204553.jpg"><br>事实上，微信早就已经预料到会有人借助红包封面“大做文章”。早在两年前，微信就曾发表声明称：“推出之日起定制方不得因封面而以任何形式收取费用，并且还制定了惩罚制度。”</p><p><strong>但这依然没有办法阻止微信红包封面成为当下的又一个“灰产”风口。</strong><br>​</p><p>有熟悉微信灰产的人表示：“卖红包封面的生意，虽然单价比较低但是销售量极大能够赚到快钱，这些人本身就是依赖热点。就像卖水果一样，每个季节都有应季的产品，过季就换。”<br>​</p><p>有网友表示：“自己连发红包的钱都没有，难道还会去花钱买红包封面？”也有其他网友表示：“原本买红包封面的初衷是为了让过年发红包时能够与众不同，而没想到这股风吹得那么快，自己根本就用不过来。”</p><h2 id="热闹过后，封面生意回归冷静"><a href="#热闹过后，封面生意回归冷静" class="headerlink" title="热闹过后，封面生意回归冷静"></a><font color="#FF0000">热闹过后，封面生意回归冷静</font></h2><p>“消费者往往都是喜新厌旧的，用的时间久了之后封面会过期依然继续使用默认封面，当下只是凑个热闹而已，商家也刚好趁这波新鲜度发放封面打广告。”有业内人士如此表示。<br>​</p><p>有专注于收藏红包封面的网友表示：“最初抢到古驰的红包封面的确很高兴，毕竟可以不用花过多的费用就能够获得品牌用品，自己还加入了收藏红包封面大军，如今自己的封面已经超过 100 个。”<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106204627.jpg" alt="20220106204627.jpg"><br>“但实际上这些红包封面自己早已经使用不过来，而且每天还要花费时间去收藏封面，期间甚至还有过上当受骗的经历。”</p><p><strong>例如之前跟第三方卖家买了一个微信红包封面，但使用不到三天就过期了，找了售后也没有办法退款，由于数额较小只能认栽。像这样的网友，其实并不在少数。</strong><br>​</p><p>在 QQ 上直接搜索微信红包封面，有很多收藏群、交易群等，进入到这些群之会发现里面讨论的内容大多数都是有关薅羊毛的信息，即便按照群内购买方式完成交易也无法收到红包封面的序列号，最终却还被踢出了群聊。<br><img src="https://unpkg.zhimg.com/hexo-post-img/20220106204631.jpg" alt="20220106204631.jpg"><br><strong>显然这种现象如果持续下去，那么关于微信红包封面的这门生意很快就会淡出灰产圈。</strong></p><p>有从事该圈子的人表示：“随着越来越多人加入进来，竞争在所难免，而且还要保证设计师和作品不会被挖墙角。与此同时，对于微信红包封面最基本来源认证公众号上，也要尽力抢夺。”<br>​</p><p>目前淘宝上的公众号认证价格水涨船高，原本认证可能只需 200 元，现在已经至少翻了两倍，成本的升高势必会让部分从业者离开。<br>​</p><p>显然，灰产注定不可持续，其出现也是利用平台漏洞和大量买方需求，一旦平台规范及买方热度下降，灰产终究会选择逃离。<br>​</p><p>对微信红包封面来说，也终将回归冷静。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPM图床的使用</title>
      <link href="/post/20cfea67/"/>
      <url>/post/20cfea67/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>本文大致内容转自 <a href="https://akilar.top/posts/3e956346/">糖果屋《NPM 图床的使用技巧》</a>有些许部分经过修改。</p><div class="tip success"><p>公益图床：<a href="https://img.huran.xyz/">忽然的公益图床 (img.huran.xyz)</a></p></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为 jsdelivr 的证书被吊销，所以在国内速度变慢，无法满足日常的使用。所以将图床从 github 更换到 NPM，通过其他的 cdn 加速节点进行加速。</p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><ol><li>首先需要注册一个 npm 的账号。访问 <a href="https://www.npmjs.com/signup/">npm 注册页面</a></li></ol><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.4/20220106084601.png" alt="20220106084601.png"></p><ol><li>完成邮箱验证，注册完成后进入账号管理界面:头像 -&gt;Account，拉倒最上方，你会看到 You have not verified your email address 字样的提示，点击以后按提示步骤验证你的邮箱。</li></ol><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.4/20220106084629.png" alt="20220106084629.png"></p><ol><li>将你之前在 github 的图床仓库，在本地合适的位置把它 clone 下来。找个空文件夹打开终端输入</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:[username]/[AssetsRepo].git</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/[username]/[AssetsRepo].git</span><br></pre></td></tr></table></figure><ol><li>在 clone 下来的 [AssetsRepo] 文件夹内打开终端，输入以下指令切换回原生源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure><ol><li>添加本地 npm 用户设置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅第一次使用需要添加用户，之后会提示你输入你的npm账号密码以及注册邮箱</span></span><br><span class="line">npm adduser</span><br><span class="line"><span class="comment"># 非第一次使用直接登录即可，之后会提示你输入你的npm账号密码以及注册邮箱</span></span><br><span class="line">npm login</span><br></pre></td></tr></table></figure><ol><li>运行 npm 初始化指令，把整个图床仓库打包，按照指示进行配置，注意需要事先确认你的包名没有和别人已发布的包重复，可以在 <a href="https://www.npmjs.com/">npm 官网</a>搜索相应包名，搜不到就说明还没被占用。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.4/20220106084921.png" alt="20220106084921.png"><br>最后会输出一段 package.json，请求确认，输入 yes 即可。</p><ol><li>然后输入发布指令，我们就可以把包发布到 npm 上了。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><ol><li>jsdelivr+npm 的图片引用和 jsdelivr+github 很相似，例如我在 [AssetsRepo] 仓库里存放的 /img/index.png</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jsDelivr+github链接</span></span><br><span class="line">https://cdn.jsdelivr.net/gh/[GithubUserName]/[AssetsRepo]/img/index.png</span><br><span class="line"><span class="comment"># jsDelivr+npm链接</span></span><br><span class="line">https://cdn.jsdelivr.net/npm/[NpmPackageName]/img/index.png</span><br></pre></td></tr></table></figure><blockquote><p><strong>可以看到 Npm 只需要提供包名即可。这也是一开始要求包名不重复的原因之一</strong></p><p><strong>jsDelivr+Npm 依然有 100MB 的包大小限制，但是 NPM 有丰富的国内节点。可以挑选一个使用。个人推荐知乎的。没有大小限制，而且也很稳定。</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">【jsd出品，网宿国内节点】</span><br><span class="line">https://cdn.jsdelivr.net/npm/:package@:version/:file</span><br><span class="line">【知乎出品，网宿国内节点】推荐使用</span><br><span class="line">https://unpkg.zhimg.com/:package@:version/:file</span><br><span class="line">【百度出品，网宿国内节点】</span><br><span class="line">https://code.bdstatic.com/npm/:package@:version/:file</span><br><span class="line">【饿了么出品，网宿国内节点】</span><br><span class="line">https://shadow.elemecdn.com/npm/:package@:version/:file</span><br></pre></td></tr></table></figure><p>当然你也可以利用 <a href="https://unpkg.com/">unpkg</a> 自建。(UNPKG 是一个内容源自 npm 的全球快速 CDN。它部署在 cloudflare 上，在大陆地区访问到的是香港节点。所以速度也不错。)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://unpkg.com/:package@:version/:file</span><br></pre></td></tr></table></figure><ol><li>如果每次都要在本地进行 npm publish 的话，npm 的提交是整个包一起上传的，不存在增量更新，耗时不说，而且还往往需要架梯子才能正常上传。所以我们可以把它交给 github action 来完成。</li></ol><p>在 <a href="https://www.npmjs.com/">npm 官网</a> -&gt;头像 -&gt;Access Tokens-&gt;Generate New Token, 勾选 Automation 选项，Token 只会显示这一次，之后如果忘记了就只能重新生成重新配置了。<br><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.4/20220106085242.png" alt="20220106085242.png"><br><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.4/20220106085311.png" alt="20220106085311.png"><br>在 github 的 [AssetsRepo] 仓库设置项里添加一个名为 NPM_TOKEN 的 secrets，把获取的 Npm 的 Access token 输入进去。<br><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.4/20220106085336.png" alt="20220106085336.png"><br>在本地的 [AssetsRepo] 文件夹下<code>新建</code> [AssetsRepo]/.github/workflows/main.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Node.js</span> <span class="string">Package</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">publish-npm:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line">          <span class="attr">registry-url:</span> <span class="string">https://registry.npmjs.org/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">publish</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">NODE_AUTH_TOKEN:</span> <span class="string">$&#123;&#123;secrets.npm_token&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>在本地的 [AssetsRepo] 文件夹下打开终端，运行以下指令，上传新增内容至 github，即可触发部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将更改提交</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;npm publish&quot;</span></span><br><span class="line"><span class="comment"># 更新package版本号</span></span><br><span class="line">npm version patch</span><br><span class="line"><span class="comment"># 推送至github触发action</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><blockquote><p>此处的四行指令顺序严格。<br>每次更新 npm 图床都需要先修改 [AssetsRepo]\package.json 里的 version, 也就是版本号。<br>而 npm version patch 即为更新 package.json 里的版本号的指令，效果是末尾版本号 + 1，例如 0.0.1=&gt;0.0.2、1.1.3=&gt;1.1.4。免去了打开 package.json 再修改版本号的麻烦。（大版本更新还是需要手动改的）<br>更新 npm 图床务必要记得更新 package.json 里的版本号！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> NPM </category>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NPM </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置反向代理，一篇搞定！</title>
      <link href="/post/1aa58be4/"/>
      <url>/post/1aa58be4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>本文转自<a href="https://blog.csdn.net/zxd1435513775/article/details/102508463">止步前行</a> 仅记录学习。<br><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.3/20220105231839.jpg" alt="20220105231839.jpg"></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>其他话不多说，下面来学习一下 Nginx 的反向代理。需要有 Linux 和 Nginx 环境。</p><h2 id="何为反向代理？"><a href="#何为反向代理？" class="headerlink" title="何为反向代理？"></a>何为反向代理？</h2><p>在介绍反向代理之前，先来了解一下正向代理。<br>​</p><p><strong>正向代理：</strong> 如果把局域网外的 Internet 想象成一个巨大的资源库，则局域网中的客户端要访问 Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。下面是正向代理的原理图。<br>​</p><p>由于工作环境原因，日常工作只能局限于单位的局域网，如果想要访问互联网，怎么办呢？这就需要用到正向代理。本人经常用正向代理来进行上网。<br><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.3/20191013121717337.png" alt="20191013121717337.png"><br><strong>反向代理：</strong>看下面原理图，就一目了然。其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器 IP 地址。<br><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.3/20191013122029747.png" alt="20191013122029747.png"></p><blockquote><p><strong>正向代理和反向代理的区别，一句话就是：如果我们客户端自己用，就是正向代理。如果实在服务器用，我们用户无感知，就是反向代理。</strong></p></blockquote><p>这里有个问题：反向代理服务器，怎么选择挂在它后面的哪一台具体服务器呢？答案在后文揭晓，这就是负载均衡。</p><h2 id="Nginx-配置文件"><a href="#Nginx-配置文件" class="headerlink" title="Nginx 配置文件"></a>Nginx 配置文件</h2><p>在学习 Nginx 之前，我们要熟知它的配置文件。毕竟，我们下面需要做的所有配置（反向代理、负载均衡、动静分离等），都是基于它的配置文件。<br>​</p><p>Nginx 默认的配置文件是在安装目录下的 conf 目录下，后续对 Nginx 的使用基本上都是对此配置文件进行相应的修改。完整的配置文件，可以看一下文章最后。修改过 nginx.conf 配置文件，记得要重启 Nginx 服务（☆☆☆☆☆）<br>​</p><p>配置文件中有很多#号，该符号表示注释内容，去掉所有以 # 开头的段落，精简之后的配置文件内容如下（PS：其实注释掉的地方，都是一些功能的使用代码，需要用到的时候，取消注释即可）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去掉注释信息后，可以将 nginx.conf 配置文件分为三部分：</p><h4 id="第一部分：全局块"><a href="#第一部分：全局块" class="headerlink" title="第一部分：全局块"></a>第一部分：全局块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br></pre></td></tr></table></figure><p>从配置文件开始到 events 块之间的内容，主要会设置一些影响 Nginx 服务器整体运行的配置指令，主要包括：配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等。<br>​</p><p>上面这行 worker_processes 配置，这是 Nginx 服务器并发处理服务的关键配置，该值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约。</p><h4 id="第二部分：events-块"><a href="#第二部分：events-块" class="headerlink" title="第二部分：events 块"></a>第二部分：events 块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">worker_connections  1024;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括：是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 wordprocess 可以同时支持的最大连接数等。<br>​</p><p>上述例子就表示每个 work process 支持的最大连接数为 1024。这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。</p><h4 id="第三部分：http-块"><a href="#第三部分：http-块" class="headerlink" title="第三部分：http 块"></a>第三部分：http 块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。需要注意的是：http 块也可以包括 http 全局块、server 块。下面的反向代理、动静分离、负载均衡都是在这部分中配置<br><strong>①、http 全局块</strong><br>http 全局块配置的指令包括：文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。<br><strong>②、server 块</strong><br>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。<br>每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。（☆☆☆☆☆）</p><h4 id="1、全局-server-块"><a href="#1、全局-server-块" class="headerlink" title="1、全局 server 块"></a>1、全局 server 块</h4><p>最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。</p><h4 id="2、location-块"><a href="#2、location-块" class="headerlink" title="2、location 块"></a>2、location 块</h4><p>一个 server 块可以配置多个 location 块。<br>​</p><p>这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</p><h2 id="反向代理如何配置"><a href="#反向代理如何配置" class="headerlink" title="反向代理如何配置"></a>反向代理如何配置</h2><h3 id="1、反向代理实例一"><a href="#1、反向代理实例一" class="headerlink" title="1、反向代理实例一"></a>1、反向代理实例一</h3><p>实现效果：使用 Nginx 反向代理，访问 www.123.com 直接跳转到 127.0.0.1:8080。</p><blockquote><p><strong>注意：此处如果要想从www.123.com跳转到本机指定的ip，需要修改本机的hosts文件。此处略过</strong></p></blockquote><p>配置代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen       80;</span><br><span class="line">server_name  192.168.17.129;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">root   html;</span><br><span class="line">index  index.html index.htm;</span><br><span class="line">proxy_pass  http://127.0.0.1:8080</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上配置，我们监听 80 端口，访问域名为 www.123.com（不加端口号时默认为 80 端口），故访问该域名时会跳转到 127.0.0.1:8080 路径上。</p><blockquote><p><strong>此处的意思为：nginx 反向代理服务监听 192.168.17.129 的 80 端口，如果有请求过来，则转到 proxy_pass 配置的对应服务器上，仅此而已。</strong></p></blockquote><p>实验结果：<br><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.3/20191013164053219.png" alt="20191013164053219.png"></p><h3 id="2、反向代理实例二"><a href="#2、反向代理实例二" class="headerlink" title="2、反向代理实例二"></a>2、反向代理实例二</h3><p>实现效果：使用 Nginx 反向代理，根据访问的路径跳转到不同端口的服务中，Nginx 监听端口为 9001。</p><ul><li>访问 <a href="http://127.0.0.1:9001/edu/">http://127.0.0.1:9001/edu/</a> 直接跳转到 127.0.0.1:8081</li><li>访问 <a href="http://127.0.0.1:9001/vod/">http://127.0.0.1:9001/vod/</a> 直接跳转到 127.0.0.1:8082</li></ul><p>第一步，需要准备两个 tomcat，一个 8001 端口，一个 8002 端口，并准备好测试的页面<br>第二步，修改 nginx 的配置文件，在 http 块中配置 server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen       9001;</span><br><span class="line">server_name  192.168.17.129;</span><br><span class="line"></span><br><span class="line">location ~ /edu/ &#123;</span><br><span class="line">proxy_pass  http://127.0.0.1:8080</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /vod/ &#123;</span><br><span class="line">proxy_pass  http://127.0.0.1:8081</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>根据上面的配置，当请求到达 Nginx 反向代理服务器时，会根据请求进行分发到不同的服务上。</strong></p></blockquote><p>实验结果：<br><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.3/20191013164815360.png" alt="20191013164815360.png"><br>补充：location 指令说明<br>该指令用于匹配 URL， 语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location [ = | ~ | ~* | ^~] uri &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（1）、= ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，</span><br><span class="line">如果匹配成功，就停止继续向下搜索并立即处理该请求。</span><br><span class="line">（2）、~：用于表示 uri 包含正则表达式，并且区分大小写。</span><br><span class="line">（3）、~*：用于表示 uri 包含正则表达式，并且不区分大小写。</span><br><span class="line">（4）、^~：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求</span><br><span class="line">字符串匹配度最高的 location 后，立即使用此 location 处理请求，</span><br><span class="line">而不再使用 location块中的正则 uri 和请求字符串做匹配。</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~* 标识</strong></p></blockquote><p><strong>Nginx 完整配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 反代 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出Linux的 I/O 原理</title>
      <link href="/post/ec85537/"/>
      <url>/post/ec85537/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>本文转载于 <a href="https://is-cloud.blog.csdn.net/article/details/105897963">云物互联</a> 仅作为记录学习</p><h2 id="传统的-System-Call-I-O"><a href="#传统的-System-Call-I-O" class="headerlink" title="传统的 System Call I/O"></a>传统的 System Call I/O</h2><p>在 Linux 系统中，传统的访问方式是通过 write() 和 read() 两个系统调用实现的，通过 read() 函数读取文件到到缓存区中，然后通过 write() 方法把缓存中的数据输出到网络端口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read(file_fd, tmp_buf, len);</span><br><span class="line">write(socket_fd, tmp_buf, len);</span><br></pre></td></tr></table></figure><p>下图分别对应传统 I/O 操作的数据读写流程，整个过程涉及 2 次 CPU 拷贝、2 次 DMA 拷贝，总共 4 次拷贝，以及 4 次上下文切换。</p><ul><li><strong>CPU 拷贝：</strong>由 CPU 直接处理数据的传送，数据拷贝时会一直占用 CPU 的资源。</li><li><strong>DMA 拷贝：</strong>由 CPU 向 DMA 磁盘控制器下达指令，让 DMA 控制器来处理数据的传送，数据传送完毕再把信息反馈给 CPU，从而减轻了 CPU 资源的占有率。</li><li><strong>上下文切换：</strong>当用户程序向内核发起系统调用时，CPU 将用户进程从用户态切换到内核态；当系统调用返回时，CPU 将用户进程从内核态切换回用户态。</li></ul><h2 id="读操作"><a href="#读操作" class="headerlink" title="读操作"></a>读操作</h2><p>当应用程序执行 read 系统调用读取一块数据的时候，如果这块数据已经存在于用户进程的页内存中，就直接从内存中读取数据。<br>​</p><p>如果数据不存在，则先将数据从磁盘加载数据到内核空间的读缓存（Read Buffer）中，再从读缓存拷贝到用户进程的页内存中。<br><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.1/20220105221445.jpg" alt="20220105221445.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read(file_fd, tmp_buf, len);</span><br></pre></td></tr></table></figure><p>基于传统的 I/O 读取方式，read 系统调用会触发 2 次上下文切换，1 次 DMA 拷贝和 1 次 CPU 拷贝。<br>发起数据读取的流程如下：</p><ul><li>用户进程通过 read() 函数向 Kernel 发起 System Call，上下文从 user space 切换为 kernel space。</li><li>CPU 利用 DMA 控制器将数据从主存或硬盘拷贝到 kernel space 的读缓冲区（Read Buffer）。</li><li>CPU 将读缓冲区（Read Buffer）中的数据拷贝到 user space 的用户缓冲区（User Buffer）。</li><li>上下文从 kernel space 切换回用户态（User Space），read 调用执行返回。</li></ul><h2 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h2><p>当应用程序准备好数据，执行 write 系统调用发送网络数据时，先将数据从用户空间的页缓存拷贝到内核空间的网络缓冲区（Socket Buffer）中，然后再将写缓存中的数据拷贝到网卡设备完成数据发送。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write(socket_fd, tmp_buf, len);</span><br></pre></td></tr></table></figure><p>基于传统的 I/O 写入方式，write() 系统调用会触发 2 次上下文切换，1 次 CPU 拷贝和 1 次 DMA 拷贝。<br>用户程序发送网络数据的流程如下：</p><ul><li>用户进程通过 write() 函数向 kernel 发起 System Call，上下文从 user space 切换为 kernel space。</li><li>CPU 将用户缓冲区（User Buffer）中的数据拷贝到 kernel space 的网络缓冲区（Socket Buffer）。</li><li>CPU 利用 DMA 控制器将数据从网络缓冲区（Socket Buffer）拷贝到 NIC 进行数据传输。</li><li>上下文从 kernel space 切换回 user space，write 系统调用执行返回。</li></ul><h2 id="网络-I-O"><a href="#网络-I-O" class="headerlink" title="网络 I/O"></a>网络 I/O</h2><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.1/20220105221600.jpg" alt="20220105221600.jpg"></p><h2 id="磁盘-I-O"><a href="#磁盘-I-O" class="headerlink" title="磁盘 I/O"></a>磁盘 I/O</h2><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.1/20220105221644.jpg" alt="20220105221644.jpg"></p><h2 id="高性能优化的-I-O"><a href="#高性能优化的-I-O" class="headerlink" title="高性能优化的 I/O"></a>高性能优化的 I/O</h2><ul><li><strong>零拷贝技术。</strong></li><li><strong>多路复用技术。</strong></li><li><strong>页缓存（PageCache）技术。</strong></li></ul><p>其中，<strong>页缓存（PageCache）</strong>是操作系统对文件的缓存，用来减少对磁盘的 I/O 操作，以页为单位的，内容就是磁盘上的物理块，页缓存能帮助程序对文件进行顺序读写的速度几乎接近于内存的读写速度，主要原因就是由于 OS 使用 PageCache 机制对读写访问操作进行了性能优化。<br>​</p><p><strong>页缓存读取策略：</strong>当进程发起一个读操作 （比如，进程发起一个 read() 系统调用），它首先会检查需要的数据是否在页缓存中：</p><ul><li><strong>如果在</strong>，则放弃访问磁盘，而直接从页缓存中读取。</li><li><strong>如果不在</strong>，则内核调度块 I/O 操作从磁盘去读取数据，并读入紧随其后的少数几个页面（不少于一个页面，通常是三个页面），然后将数据放入页缓存中。</li></ul><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.1/20220105221731.jpg" alt="20220105221731.jpg"><br><strong>页缓存写策略：</strong>当进程发起 write 系统调用写数据到文件中，先写到页缓存，然后方法返回。此时数据还没有真正的保存到文件中去，Linux 仅仅将页缓存中的这一页数据标记为 “脏”，并且被加入到脏页链表中。</p><p>然后，由 flusher 回写线程周期性将脏页链表中的页写到磁盘，让磁盘中的数据和内存中保持一致，最后清理“脏”标识。在以下三种情况下，脏页会被写回磁盘：</p><ul><li>空闲内存低于一个特定阈值。</li><li>脏页在内存中驻留超过一个特定的阈值时。</li><li>当用户进程调用 sync() 和 fsync() 系统调用时。</li></ul><h2 id="存储设备的-I-O-栈"><a href="#存储设备的-I-O-栈" class="headerlink" title="存储设备的 I/O 栈"></a>存储设备的 I/O 栈</h2><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.1/20220105221800.jpg" alt="20220105221800.jpg"><br>由图可见，从系统调用的接口再往下，Linux 下的 IO 栈致大致有三个层次：</p><ul><li><strong>文件系统层</strong>，以 write 为例，内核拷贝了 write 参数指定的用户态数据到文件系统 Cache 中，并适时向下层同步。</li><li><strong>块层</strong>，管理块设备的 IO 队列，对 IO 请求进行合并、排序（还记得操作系统课程学习过的 IO 调度算法吗？)。</li><li><strong>设备层</strong>，通过 DMA 与内存直接交互，完成数据和具体设备之间的交互。</li></ul><p>结合这个图，想想 Linux 系统编程里用到的 <strong>Buffered IO、mmap、Direct IO</strong>，这些机制怎么和 <strong>Linux I/O</strong> 栈联系起来呢？上面的图有点复杂，我画一幅简图，把这些机制所在的位置添加进去：</p><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.1/20220105221819.jpg" alt="20220105221819.jpg"><br>这下一目了然了吧？<strong>传统的 Buffered IO</strong> 使用 read 读取文件的过程什么样的？假设要去读一个冷文件（Cache 中不存在），open 打开文件内核后建立了一系列的数据结构，接下来调用 read，到达文件系统这一层，发现 Page Cache 中不存在该位置的磁盘映射，然后创建相应的 <strong>Page Cache</strong> 并和相关的扇区关联。然后请求继续到达块设备层，在 IO 队列里排队，接受一系列的调度后到达设备驱动层，此时一般使用 <strong>DMA</strong> 方式读取相应的磁盘扇区到 Cache 中，然后 read 拷贝数据到用户提供的<strong>用户态 buffer </strong>中去（read 的参数指出的)。</p><p><strong>整个过程有几次拷贝？</strong>从磁盘到 Page Cache 算第一次的话，从 Page Cache 到用户态 buffer 就是第二次了。而 mmap 做了什么？mmap 直接把 Page Cache 映射到了用户态的地址空间里了，所以 mmap 的方式读文件是没有第二次拷贝过程的。<br>​</p><p><strong>那 Direct IO 做了什么？</strong>这个机制更狠，直接让用户态和块 IO 层对接，直接放弃 Page Cache，从磁盘直接和用户态拷贝数据。好处是什么？写操作直接映射进程的 buffer 到磁盘扇区，以 DMA 的方式传输数据，减少了原本需要到 Page Cache 层的一次拷贝，提升了写的效率。对于读而言，第一次肯定也是快于传统的方式的，但是之后的读就不如传统方式了（当然也可以在用户态自己做 Cache，有些商用数据库就是这么做的）。<br>​</p><p>除了传统的 Buffered IO 可以比较自由的用偏移+长度的方式读写文件之外，mmap 和 Direct IO 均有数据按页对齐的要求，Direct IO 还限制读写必须是底层存储设备块大小的整数倍（甚至 Linux 2.4 还要求是文件系统逻辑块的整数倍）。所以接口越来越底层，换来表面上的效率提升的背后，需要在应用程序这一层做更多的事情。所以想用好这些高级特性，除了深刻理解其背后的机制之外，也要在系统设计上下一番功夫。</p><h2 id="I-O-Buffering"><a href="#I-O-Buffering" class="headerlink" title="I/O Buffering"></a>I/O Buffering</h2><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.1/20220105221855.jpg" alt="20220105221855.jpg"><br>如图，当程序调用各类文件操作函数后，用户数据（User Data）到达磁盘（Disk)的流程如图所示。<br>图中描述了 Linux 下文件操作函数的层级关系和内存缓存层的存在位置。中间的黑色实线是用户态和内核态的分界线。<br>从上往下分析这张图： 1.首先是 C 语言 stdio 库定义的相关文件操作函数，这些都是用户态实现的跨平台封装函数。stdio 中实现的文件操作函数有自己的 stdio buffer，这是在用户态实现的缓存。此处使用缓存的原因很简单 — 系统调用总是昂贵的。如果用户代码以较小的 size 不断的读或写文件的话，stdio 库将多次的读或者写操作通过 buffer 进行聚合是可以提高程序运行效率的。stdio 库同时也支持 fflush 函数来主动的刷新 buffer，主动的调用底层的系统调用立即更新 buffer 里的数据。特别地，setbuf 函数可以对 stdio 库的用户态 buffer 进行设置，甚至取消 buffer 的使用。</p><p>2.<strong>系统调用的 read/write 和真实的磁盘读写之间也存在一层 buffer</strong>，这里用术语 Kernel buffer cache 来指代这一层缓存。在 Linux 下，文件的缓存习惯性的称之为 Page Cache，而更低一级的设备的缓存称之为 Buffer Cache。这两个概念很容易混淆，这里简单的介绍下概念上的区别：Page Cache 用于缓存文件的内容，和文件系统比较相关。文件的内容需要映射到实际的物理磁盘，这种映射关系由文件系统来完成；Buffer Cache 用于缓存存储设备块（比如磁盘扇区）的数据，而不关心是否有文件系统的存在（文件系统的元数据缓存在 Buffer Cache 中）。<br>​</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登顶吾爱的小工具，这软件时机来得刚刚好！</title>
      <link href="/post/3f42529/"/>
      <url>/post/3f42529/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近疫情严重了，很多地方都出现了本地确诊病例，尤其是西安，其他地方也已经严格管控了。疫情历经了接近两年，大家对于疫情也没那么恐慌，按照规定，该干嘛干嘛，不给国家添乱，不给社会添堵。</p><p>虽然说疫情已经成为了一场持久战，但是疫情并未松懈。特别是身处外地的小伙伴，快过年了，肯定更加关注疫情变化。但是疫情的信息去哪里查才好呢？<br>​</p><p>来，看看吾爱的一软件作者开发出来的这款小工具，看他怎么说~</p><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p>据介绍，软件的作者比较关注疫情，而无论是百度的疫情动态，还是腾讯的动态，数据都不完整，于是作者整合了两大平台数据，开发出了这款“疫情数据关注工具”。<br>​</p><p>这款工具腾讯哈勃检测是无毒，可放心使用。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.8/20220104161941.jpg" alt="20220104161941.jpg"><br>软件是单文件版本，其因为是整合腾讯与百度的疫情动态，所以一定要连网才能使用。</p><p>这个软件作者做得还是非常详细的，本土现有确认、现有确诊、累计确诊、无症状感染者、境外输入的数据全都有，而且还有每个数据都有“较昨日”的数据对比。下面还罗列了高风险区域和中风险地区。<br>​</p><p><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.8/20220104161838.jpg" alt="20220104161838.jpg"><br>除了数据罗列的方式，软件还有本土现有确诊柱状图，非常直观。</p><p><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.8/20220104162009.jpg" alt="20220104162009.jpg"><br>软件还有本地现有的饼状图，目前是陕西西安占绝大多数，大家如没必要，不要出行，如有必要也要避开高风险地区。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.8/20220104162034.jpg" alt="20220104162034.jpg"><br>在疫情还非常严峻的今天，我觉得有必要经常关注疫情，特别是临近春节了，大家更应该多多关注。软件就介绍到这里啦，感兴趣的小伙伴文末获取叭~~~</p><h2 id="软件获取"><a href="#软件获取" class="headerlink" title="软件获取"></a>软件获取</h2><div class="btns rounded grid5">            <a class="button" href='https://huran.lanzout.com/iMeVwyd63of' title='蓝奏云'><i class='fas fa-download'></i>蓝奏云</a>          </div>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 工具 </tag>
            
            <tag> 疫情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1+1&gt;2，数据告诉你为什么内存条2根小的比1根大的强</title>
      <link href="/post/7fee4a75/"/>
      <url>/post/7fee4a75/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>我们通常认为参数相同的前提下，单个硬件的表现优于多个硬件的组合，因为它的集成度更高，可以避免协同造成的性能损失。</p><p>但如果你自己折腾过电脑的话，可能知道电脑内存条更推荐买两根小的，这样得到的效果比单根大的更好。</p><p>为什么会这样？1+1&gt;2 是否随时都有效？<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154405.jpg" alt="20220104154405.jpg"></p><h2 id="多个内存多条路"><a href="#多个内存多条路" class="headerlink" title="多个内存多条路"></a>多个内存多条路</h2><p>我们可以把硬件间的数据传输想象成马路上奔跑的车辆，当有大量车辆需要通行时（大量读写数据），在不堵车的情况下，道路越宽可以通行的车辆就越多，数据传输量就越大。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154451.jpg" alt="20220104154451.jpg"><br>传输数据的马路在电脑中叫做「总线」，它的频率和带宽是固定的，由主板的设计决定。频率越高，车辆的限速就越高，跑得越快，<strong>数据传输速度也更快；</strong>带宽越大，车道的宽度就越大，容量的车辆也越多，<strong>同时传输的数据量就更大。</strong></p><hr><p>在电脑内存发展的中期，因为主板接口通常使用串联设计，内存条不管安装多少根，都只走一条路线传输数据。假如总线带宽为 64-bit，当内存传的带宽达到 64-bit 时，不管加再多内存条也不会突破总线上限。于是就出现了瓶颈。</p><p>为了解决这个问题，主板接口引入并联设计，<strong>每个接口享用独立的传输数据通道。</strong>原本两根内存条的数据挤一个通道，现在多出一个通道，理论带宽翻倍达到 128-bit。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154522.jpg" alt="20220104154522.jpg"><br><strong>这种安装两根内存条，享受两根数据传输通道的做法我们称为「双通道」。</strong></p><hr><p>想要知道自己目前是否为双通道，可以下载 CPU-Z，在内存选项卡中会表明目前的状态。（并不是插两根内存条就是双通道，后面讲原因）<img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154547.jpg" alt="20220104154547.jpg"></p><h2 id="多通道"><a href="#多通道" class="headerlink" title="多通道"></a>多通道</h2><p>有些主板上不止两个内存插糟，那么是否也有三通道、四通道呢？答案是肯定的。但是情况要比双通道复杂的多得。</p><p>现在的 CPU 和主板都支持双通道，但对三通道的支持却并不常见。</p><p>假如同时插 3 根 8GB 内存条，理论上三通道应该是 64<em>3bit。但实际的情况多半是前两根组成了双通道 64</em>2bit，第三根依然是单通道 64bit，最终结果是 64*2bit <strong>+</strong> 64bit。</p><p><strong>这种情况称为「非对称双通道」，依然是双通道。</strong><br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154617.jpg" alt="20220104154617.jpg"></p><p>看起来 64<em>3 和 64</em>2+64 的计算结果是一样的？然而表面数值和实际情况往往有很大差别。</p><p>因为我们要<strong>把双通道看成一个性能升级的整体，</strong>我们打开一个程序，系统很可能会将这个程序的数据拆分为双份，分配给双通道的两根内存条，以享受更高的带宽。</p><p>假如我们打开了聊天、浏览器、Word 等这种不怎么需要用内存大量传输数据的程序，它们占用了双通道内存。</p><p>此时再打开一个游戏或视频剪辑软件这种需要大量内存空间的程序，因为双通道空间不足，它就只能使用单通道的 8GB 内存。</p><p>这样的分配显然不合理，「三通道」很可能反而不如双通道。</p><p><strong>因为双通道内存中的数据不会与单通道共享。</strong></p><p><strong>​</strong>当然也有特殊的主板 CPU 是支持真正的三通道，但是比较少见。</p><p><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154641.jpg" alt="20220104154641.jpg"><br>支持的四通道的主板也少，服务器比较多见。（主板上并不是一个内存插槽就是一个通道，后面讲原因）<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154646.jpg" alt="20220104154646.jpg"></p><h2 id="别抱太大期望"><a href="#别抱太大期望" class="headerlink" title="别抱太大期望"></a>别抱太大期望</h2><p>带宽翻倍这事情听起来很厉害，毕竟数据传输量翻倍，但实际体验远没有纸面数据那么夸张。</p><p>下面是单通道 8GB DDR3 与双通道 8GB（4+4GB）DDR3 的测试数据对比，<strong>橙色为双通道，蓝色为单通道。</strong><br><strong>​</strong></p><p><strong>Euler 3D</strong><br>在 Euler 3D 基准测试中，双通道的性能比单通道强大约 17％。对于执行高负荷运算，仿真和编译的朋友，这个测试比较有参考价值。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154736.jpg" alt="20220104154736.jpg"><br><strong>复制，读写和带宽</strong><br>这项测试可以明显看出带宽提升带来的性能提升，虽然提升 20% 也很明显，但还远未达到所谓翻倍效果。<img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154749.jpg" alt="20220104154749.jpg"><br><strong>内存延迟</strong><br>延迟是指数据传输指令送达后到开始传输数据之间的延迟。双通道的延迟能够缩短约 2.7％ 的，仍然略优于单通道。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154822.jpg" alt="20220104154822.jpg"><br><strong>视频转码</strong><br>Handbrake 是一个强大的工具，可以将电脑性能推到极限，双通道在视频转码工作上大约有 4.5% 的优势。即使对于视频翻录或转码有重度需求的朋友，这点点提升也是微乎其微。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154833.jpg" alt="20220104154833.jpg"><br><strong>Adobe Premiere</strong><br>这是目前最常用的视频剪辑软件，基准测试中，双通道省了大约 8 秒的总体渲染时间，测试中渲染的视频比较短，如果全天渲染的话差距可能会提升到十几到几十分钟。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154911.jpg" alt="20220104154911.jpg"><br><strong>游戏测试</strong><br>最后是大家比较关心的游戏性能，在搭配 GTX 1060 显卡时，得到的结果与前面大致相同，双通道可以略微提升几帧。但有时双通道的性能反而会下降，这点在巫师 3 中格外明显。原因可能是因为游戏的优化问题。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154923.jpg" alt="20220104154923.jpg"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>对于双通道并不是双根内存条插上就完事了，它还有很多限制。</p><p>1、最简单的做法就是使用两根同品牌、同型号、同容量、同频率的一模一样的内存条，这样得到的效果最佳也最省心。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154950.jpg" alt="20220104154950.jpg"><br>2、当两根内存条容量不同时，例如 4GB+8GB 也能组成双通道，实际上的效果是 8GB 的前 4GB 加入双通道，后 4GB 自成一派，得到「不对称双通道」。</p><p>3、两根不同频率的内存条，例如 2400Hz 和 2666Hz 也能组成双通道，实际上的效果是高频自动降为低频，最终就是 2400Hz 的双通道。（请先了解主板最高支持多少频率）</p><p>4、DDR4 与 DDR3 无法组成双通道，不过也很少有主板同时支持两代内存条，插槽都不一样。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104155006.jpg" alt="20220104155006.jpg"><br>5、有 4 个内存插槽的主板通常是双通道。如下图，两个相邻插槽为一个通道。这一点非常非常重要，大多数人都是两根内存条条组成双通道，但是有四个插槽，一些有强迫症又不看说明书的朋友就会挨着插，这样其实都插到一个通道里了，无法组成双通道！<img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104155018.jpg" alt="20220104155018.jpg"><br>如果只有两根内存条，最佳做法是先插 <strong>A2 </strong>和 <strong>B2</strong>，如果只有一根内存条就先插 <strong>A2</strong>，也就是先用离 CPU 远的插槽(远端)。</p><p>之所以这样做是因为在同一通道内，如果远端没有内存条，它会有信号反射的现象，<strong>A2</strong> 的信号又反射回 <strong>A1</strong>，造成信号干扰，影响性能的发挥。</p><p>当然，为了提高容错率，<strong>A1</strong>+<strong>B2</strong>，<strong>A2</strong>+<strong>B1</strong>也是能够组成双通道的，只是建议大家使用最佳组合，特别是需要超频的朋友。</p><p>6、4+4+8 也能组成双通道，正如上一条说的两个相邻插槽为一个通道，所以将两根 4GB 内存条插入 <strong>A 组</strong>，8GB 插入 <strong>B 组</strong>，依然能够组成双通道。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>双通道确实能够获得 1+1&gt;2 的效果，但可能只有 2.1 与 2 的区别。</p><p>2022 年小淙并不建议 4+4 的组合，因为后续的提升限制比较多。</p><p>如果你的预算不够，应该先买一根 8GB 或 16GB，手头宽裕了再提升到 8+8 或 16+16 的组合。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 内存 </tag>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twikoo添加图片点击放大功能</title>
      <link href="/post/22ab2c3c/"/>
      <url>/post/22ab2c3c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><strong>转自 </strong><a href="https://www.bilibilianime.com/2021/07/16/twikoo-img-zoom/"><strong>为 butterfly 主题的 twikoo 添加图片点击放大功能</strong></a><strong>仅为学习记录。 </strong></p><p>主题目录\layout\includes\third-party\comments<br>修改 twikoo.pug，大概在第 5 行左右的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">twikoo.init(<span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#twikoo-wrap&#x27;</span>,</span><br><span class="line">  <span class="attr">envId</span>: <span class="string">&#x27;!&#123;theme.twikoo.envId&#125;&#x27;</span>,</span><br><span class="line">  <span class="attr">region</span>: <span class="string">&#x27;!&#123;theme.twikoo.region&#125;&#x27;</span>,</span><br><span class="line">  <span class="attr">onCommentLoaded</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span>.mediumZoom!=<span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> zoomComment = mediumZoom(<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.tk-content :not(a)&gt;img&#x27;</span>))</span><br><span class="line">      zoomComment.on(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> photoBg = <span class="built_in">document</span>.documentElement.getAttribute(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;dark&#x27;</span> ? <span class="string">&#x27;#121212&#x27;</span> : <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">        zoomComment.update(&#123;</span><br><span class="line">          <span class="attr">background</span>: photoBg</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(GLOBAL_CONFIG.lightbox === <span class="string">&#x27;fancybox&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> addFancybox = <span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">const</span> runFancybox = <span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">            ele.each(<span class="function"><span class="keyword">function</span> (<span class="params">i, o</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">const</span> $this = $(o)</span><br><span class="line">              <span class="keyword">const</span> lazyloadSrc = $this.attr(<span class="string">&#x27;data-lazy-src&#x27;</span>) || $this.attr(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">              <span class="keyword">const</span> dataCaption = $this.attr(<span class="string">&#x27;alt&#x27;</span>) || <span class="string">&#x27;&#x27;</span></span><br><span class="line">              $this.wrap(<span class="string">`&lt;a href=&quot;<span class="subst">$&#123;lazyloadSrc&#125;</span>&quot; data-fancybox=&quot;group&quot; data-caption=&quot;<span class="subst">$&#123;dataCaption&#125;</span>&quot; class=&quot;fancybox&quot;&gt;&lt;/a&gt;`</span>)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            $().fancybox(&#123;</span><br><span class="line">              <span class="attr">selector</span>: <span class="string">&#x27;[data-fancybox]&#x27;</span>,</span><br><span class="line">              <span class="attr">loop</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">transitionEffect</span>: <span class="string">&#x27;slide&#x27;</span>,</span><br><span class="line">              <span class="attr">protect</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">buttons</span>: [<span class="string">&#x27;slideShow&#x27;</span>, <span class="string">&#x27;fullScreen&#x27;</span>, <span class="string">&#x27;thumbs&#x27;</span>, <span class="string">&#x27;close&#x27;</span>],</span><br><span class="line">              <span class="attr">hash</span>: <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> $.fancybox === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">            $(<span class="string">&#x27;head&#x27;</span>).append(<span class="string">`&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;<span class="subst">$&#123;GLOBAL_CONFIG.source.fancybox.css&#125;</span>&quot;&gt;`</span>)</span><br><span class="line">            $.getScript(<span class="string">`<span class="subst">$&#123;GLOBAL_CONFIG.source.fancybox.js&#125;</span>`</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              runFancybox($(ele))</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            runFancybox($(ele))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      addFancybox(<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.tk-content :not(a)&gt;img&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, !&#123;<span class="built_in">JSON</span>.stringify(theme.twikoo.option)&#125;))</span><br></pre></td></tr></table></figure><p>完整版</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">script.</span><br><span class="line">  (<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> $countDom = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;twikoo-count&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> init = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      twikoo.init(<span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#twikoo-wrap&#x27;</span>,</span><br><span class="line">        <span class="attr">envId</span>: <span class="string">&#x27;!&#123;theme.twikoo.envId&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">region</span>: <span class="string">&#x27;!&#123;theme.twikoo.region&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">onCommentLoaded</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.mediumZoom != <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> zoomComment = mediumZoom(<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.tk-content :not(a)&gt;img&#x27;</span>))</span><br><span class="line">            zoomComment.on(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> photoBg = <span class="built_in">document</span>.documentElement.getAttribute(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;dark&#x27;</span> ? <span class="string">&#x27;#121212&#x27;</span> : <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">              zoomComment.update(&#123;</span><br><span class="line">                <span class="attr">background</span>: photoBg</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (GLOBAL_CONFIG.lightbox === <span class="string">&#x27;fancybox&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> addFancybox = <span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">const</span> runFancybox = <span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">                ele.each(<span class="function"><span class="keyword">function</span> (<span class="params">i, o</span>) </span>&#123;</span><br><span class="line">                  <span class="keyword">const</span> $this = $(o)</span><br><span class="line">                  <span class="keyword">const</span> lazyloadSrc = $this.attr(<span class="string">&#x27;data-lazy-src&#x27;</span>) || $this.attr(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">                  <span class="keyword">const</span> dataCaption = $this.attr(<span class="string">&#x27;alt&#x27;</span>) || <span class="string">&#x27;&#x27;</span></span><br><span class="line">                  $this.wrap(<span class="string">`&lt;a href=&quot;<span class="subst">$&#123;lazyloadSrc&#125;</span>&quot; data-fancybox=&quot;group&quot; data-caption=&quot;<span class="subst">$&#123;dataCaption&#125;</span>&quot; class=&quot;fancybox&quot;&gt;&lt;/a&gt;`</span>)</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                $().fancybox(&#123;</span><br><span class="line">                  <span class="attr">selector</span>: <span class="string">&#x27;[data-fancybox]&#x27;</span>,</span><br><span class="line">                  <span class="attr">loop</span>: <span class="literal">true</span>,</span><br><span class="line">                  <span class="attr">transitionEffect</span>: <span class="string">&#x27;slide&#x27;</span>,</span><br><span class="line">                  <span class="attr">protect</span>: <span class="literal">true</span>,</span><br><span class="line">                  <span class="attr">buttons</span>: [<span class="string">&#x27;slideShow&#x27;</span>, <span class="string">&#x27;fullScreen&#x27;</span>, <span class="string">&#x27;thumbs&#x27;</span>, <span class="string">&#x27;close&#x27;</span>],</span><br><span class="line">                  <span class="attr">hash</span>: <span class="literal">false</span></span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">typeof</span> $.fancybox === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">                $(<span class="string">&#x27;head&#x27;</span>).append(<span class="string">`&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;<span class="subst">$&#123;GLOBAL_CONFIG.source.fancybox.css&#125;</span>&quot;&gt;`</span>)</span><br><span class="line">                $.getScript(<span class="string">`<span class="subst">$&#123;GLOBAL_CONFIG.source.fancybox.js&#125;</span>`</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                  runFancybox($(ele))</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                runFancybox($(ele))</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            addFancybox(<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.tk-content :not(a)&gt;img&#x27;</span>))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, !&#123;<span class="built_in">JSON</span>.stringify(theme.twikoo.option)&#125;))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> getCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      twikoo.getCommentsCount(&#123;</span><br><span class="line">        <span class="attr">envId</span>: <span class="string">&#x27;!&#123;theme.twikoo.envId&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">region</span>: <span class="string">&#x27;!&#123;theme.twikoo.region&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">urls</span>: [<span class="built_in">window</span>.location.pathname],</span><br><span class="line">        <span class="attr">includeReply</span>: <span class="literal">false</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        $countDom.innerText = res[<span class="number">0</span>].count</span><br><span class="line">      &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> loadTwikoo = <span class="function">(<span class="params">bool = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> twikoo === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        init()</span><br><span class="line">        bool &amp;&amp; $countDom &amp;&amp; <span class="built_in">setTimeout</span>(getCount,<span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        getScript(<span class="string">&#x27;!&#123;theme.CDN.twikoo&#125;&#x27;</span>).then(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">          init()</span><br><span class="line">          bool &amp;&amp; $countDom &amp;&amp; <span class="built_in">setTimeout</span>(getCount,<span class="number">0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;!&#123;theme.comments.use[0]&#125;&#x27;</span> === <span class="string">&#x27;Twikoo&#x27;</span> || !!&#123;theme.comments.lazyload&#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!&#123;theme.comments.lazyload&#125;) btf.loadComment(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;twikoo-wrap&#x27;</span>), loadTwikoo)</span><br><span class="line">      <span class="keyword">else</span> loadTwikoo(<span class="literal">true</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.loadOtherComment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        loadTwikoo()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> twikoo </tag>
            
            <tag> 评论 </tag>
            
            <tag> 图片 </tag>
            
            <tag> 放大 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一款只有870K的工具，弥补Windows的不足！</title>
      <link href="/post/dd140b41/"/>
      <url>/post/dd140b41/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="啰嗦几句"><a href="#啰嗦几句" class="headerlink" title="啰嗦几句"></a>啰嗦几句</h2><p>虽然 win11 正式版都已经上线了，但不排除有些小伙伴确实还在用着 win7 或者 winXP 的系统，且不说电脑又老又旧，玩游戏是没可能，就日常的办公它都成问题。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.4/20211229212612.jpg" alt=""><br>电脑卡顿的原因有硬件问题也有软件问题。就电脑内存来说，如果开的程序太多，会耗尽你电脑的 RAM(随机存取内存)，使得你的电脑系统变得缓慢或没有反应，而需要清理内存并不太容易。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.4/20211229212620.gif" alt="20211229212620.gif"><br>今天给大家介绍一款国外的专业的内存清理软件，能拯救你那蜗牛一样的电脑反应速度，来看看叭~~~</p><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p>这款是国外的软件，支持 32 位和 64 位，而且支持的操作系统从 winXP 一路到 win11，基本市面上所有的 win 操作系统都能支持。<br>打开软件，我们可以看到目前的电脑的使用率，我的电脑目前使用为 44%，已经用了 6.9G 的内存。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.4/20211229212926.png" alt="20211229212926.png"><br>点击【优化】后，电脑的内存已用变为了 3.5G，帮我清出了 3.4G 的内存。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.4/20211229213050.png" alt="20211229213050.png"><br>我自己的电脑还好，有 16G 内存，对于一些老旧电脑，用这款清理以后，能明显感觉电脑快了不少。<br>好多人会想到 360 的加速球，因为加速球也可能清理内存，但 360 加速球并不能独立安装。为了清个内存而安装一个更占内存的软件，这太不划算了。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.4/20211229213352.png" alt="20211229213352.png"><br>在【选项】中，我们可以设置随机启动，还可以选择任务栏图标。最实用的是可以<strong>设置阈值</strong> ，如果电脑系统超过了设定的阈值，软件就会自动的清理内存，不需要我们手动去处理。</p><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><div class="btns rounded grid5">            <a class="button" href='https://huran.lanzout.com/imGOGy3xgri' title='蓝奏云'><i class='fas fa-download'></i>蓝奏云</a>          </div>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 工具 </tag>
            
            <tag> 内存清理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 新建文章自动打开编辑器</title>
      <link href="/post/60f1ef6d/"/>
      <url>/post/60f1ef6d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>转自<a href="https://www.sianx.com/">Sianx’s Blog</a><a href="https://www.sianx.com/posts/c32b6e4c/#Hexo%20%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8">《博客魔改记录》</a>仅用于记录和学习。</p><ol><li>在 HEXO 根目录下新建<code>scripts</code>文件夹</li><li>在<code>scripts</code>文件夹新建一个 js 文件，例如<code>new.js</code></li><li>在<code>new.js</code>中添加如下代码：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var spawn = require(&#x27;child_process&#x27;).exec</span><br><span class="line"></span><br><span class="line">hexo.on(&#x27;new&#x27;, function(data)&#123;</span><br><span class="line">  spawn(&#x27;start  &quot;D:\Program Files\Typora\Typora.exe&quot; &#x27; + data.path)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中<code>D:\Program Files\Typora\Typora.exe</code>改成你自己编辑器的绝对地址即可。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> 编辑器 </tag>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Butterfly 主题的双栏卡片主页文章 css 样式</title>
      <link href="/post/8728f55f/"/>
      <url>/post/8728f55f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><strong>转自</strong><a href="https://zfe.space/">小冰博客</a><a href="https://zfe.space/post/52914.html">《教程：基于 Butterfly 主题的双栏卡片主页文章 css 样式》</a><strong>仅用于学习。</strong></p><h3 id="步骤-1：调整文章图片布局"><a href="#步骤-1：调整文章图片布局" class="headerlink" title="步骤 1：调整文章图片布局"></a>步骤 1：调整文章图片布局</h3><p>首先你需要确保文章的图片位置为左侧布局。<br>打开主题配置文件，搜索封面顯示的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># the position of cover in home page (封面顯示的位置)</span><br><span class="line">  # left/right/both</span><br><span class="line">  position: left</span><br></pre></td></tr></table></figure><p>将 position 改为 left。<br>同时设置 hexo 的页面展示文章数首页文章数最好大于 20 篇。<br>目前已修复，不过最好多一点不然侧边栏会显得过长。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Home page setting</span><br><span class="line"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line">index_generator:</span><br><span class="line">  path: &#x27;&#x27;</span><br><span class="line">  per_page: 20</span><br><span class="line">  order_by: -date</span><br></pre></td></tr></table></figure><h3 id="步骤-2：接入-CSS"><a href="#步骤-2：接入-CSS" class="headerlink" title="步骤 2：接入 CSS"></a>步骤 2：接入 CSS</h3><p>打开主题配置文件<br>搜索到”inject:”设置处<br>原生添加以下代码或下载 css 从本地导入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-double-row-display@1.00/cardlistpost.css&quot;/&gt;</span><br><span class="line">  bottom:</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#recent-posts</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>:-<span class="number">1rem</span>;  <span class="comment">/*头部为空时抵消间隔，若有磁贴或日历请注释掉该行*/</span></span><br><span class="line">    <span class="attribute">align-content</span>:flex-start;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap; <span class="comment">/*规定灵活的项目在必要的时候拆行或拆列。*/</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-between; <span class="comment">/*。*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">  <span class="comment">/*max-height:324px;*/</span>  <span class="comment">/*文章容器最大高度*/</span></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1rem</span>; <span class="comment">/*最小间距*/</span></span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">height</span>:auto; <span class="comment">/*高度自动*/</span></span><br><span class="line">  <span class="attribute">width</span>:<span class="number">49%</span>;<span class="comment">/*文章容器容器宽度*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> <span class="selector-class">.post_cover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>; <span class="comment">/*图片封面宽度*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;<span class="comment">/*图片封面高度*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> <span class="selector-class">.post_cover</span> <span class="selector-tag">img</span><span class="selector-class">.post_bg</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;<span class="comment">/*图片宽度*/</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;<span class="comment">/*图片高度*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &gt;<span class="selector-class">.recent-post-info</span> &gt; <span class="selector-class">.content</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:none;<span class="comment">/*隐藏文章详情*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line"></span><br><span class="line">  -webkit-<span class="attribute">flex-direction</span>: column; <span class="comment">/*容器内部纵向排列*/</span></span><br><span class="line">  -ms-<span class="attribute">flex-direction</span>: column; <span class="comment">/*容器内部纵向排列*/</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: column; <span class="comment">/*容器内部纵向排列*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> <span class="selector-class">.left_radius</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span> <span class="number">8px</span> <span class="number">0</span> <span class="number">0</span>;<span class="comment">/*圆角修改*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> <span class="selector-class">.right_radius</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span> <span class="number">8px</span> <span class="number">0</span> <span class="number">0</span>;<span class="comment">/*圆角修改*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.recent-post-item</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:auto <span class="meta">!important</span>;<span class="comment">/*容器高度自动*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recent-post-info</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">40px</span>;<span class="comment">/*容器内部文字左右间距*/</span></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1em</span>;<span class="comment">/*容器内部文字上间距*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span><span class="meta">!important</span>;<span class="comment">/*容器宽度*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &gt; <span class="selector-class">.recent-post-info</span> &gt; <span class="selector-class">.article-title</span> &#123;</span><br><span class="line">    -webkit-line-clamp: <span class="number">1</span>;<span class="comment">/*控制标题的行数*/</span></span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0.3rem</span>; <span class="comment">/*控制标题的上间距*/</span></span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0.3rem</span>;<span class="comment">/*控制标题的下间距*/</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--text-highlight-color);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2em</span>; <span class="comment">/*控制标题的字体大小*/</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.4</span>;<span class="comment">/*控制标题的行高*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &gt;<span class="selector-class">.recent-post-info</span> &gt; <span class="selector-class">.article-meta-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;<span class="comment">/*控制标题meta信息的底部间距*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>:<span class="number">100%</span>;<span class="comment">/*控制手机自适应*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链接进入后，你会发现，布局神奇地变成了双栏布局。</p><h3 id="步骤-3：修改-pug"><a href="#步骤-3：修改-pug" class="headerlink" title="步骤 3：修改 pug"></a>步骤 3：修改 pug</h3><h4 id="原生主题用户"><a href="#原生主题用户" class="headerlink" title="原生主题用户"></a>原生主题用户</h4><p>如果你想让发布时间、分类、标签不在一行显示可以修改 pug。<br>打开”\themes\hexo-theme-butterfly\layout\includes\mixins\post-ui.pug”。<br>在__separator 和 i.fas 之间加上换行符 br。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">span.article-meta__separator</span><br><span class="line">br</span><br><span class="line">i.fas.fa-tag.article-meta__icon</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vercel部署随机图API</title>
      <link href="/post/be90eff1/"/>
      <url>/post/be90eff1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><div class="tip success"><p>公益随机图API：<a href="https://img.huran.xyz/random.php">https://img.huran.xyz/random.php</a> </p></div><div class="timeline"><div class="timenode"><div class="meta"><p><p>2022-01-18 1.0.2 -&gt; 1.1.0</p></p></div><div class="body"><ol><li>随机图api更新为自己的国内服务器，提高访问速度</li><li>具体图片和数量请看博客<a href="/photo/">相册</a></li></ol></div></div><div class="timenode"><div class="meta"><p><p>2022-01-06 1.0.1 -&gt; 1.0.2</p></p></div><div class="body"><ol><li>手机端图片增加163张，目前总计191张</li><li>具体图片和数量请看博客<a href="/photo/">相册</a></li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-12-25 1.0.0-&gt; 1.0.1</p></p></div><div class="body"><ol><li>由于jsd原因，国内访问变慢，现已将jsd加速的图片链接更改为知乎网宿节点的npm，保证其速度</li><li>具体图片和数量请看博客<a href="/photo/">相册</a></li></ol></div></div></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于随机图，大家应该知道，也有很多的公益随机图API。但里面的图片毕竟都是别人的，可能并不是自己想要的。但是部署随机图又需要服务器，毕竟是PHP动态。虽然一直听别人说Vercel可以部署动态。但自己毕竟小白一个，也不会，也不了解。机缘巧合下，在GitHub里看到一个仓库，他就是通过Vercel来部署的随机图。但是不能根据手机访问还是电脑访问来返回相应的图片，所以我也是加以修改，使其可以根据访问设备来返回PC图还是PE图。</p><p>缺点就是每月限流100G，不过对于个人使用可以说是完全的足够了。</p><h2 id="Let’s-start"><a href="#Let’s-start" class="headerlink" title="Let’s start"></a>Let’s start</h2><p>原项目地址：<a href="https://github.com/YieldRay/Random-Picture">YieldRay/Random-Picture: 随机图片api (github.com)</a></p><p>我自己修改后的项目地址：<a href="https://github.com/hurangit/vercel-img">hurangit/vercel-img (github.com)</a></p><p>快速部署，就将我修改后的项目地址<code>Fork</code>到自己的仓库，然后点击Deploy直接跳转到Vercel部署界面</p><h2 id="Velcer部署"><a href="#Velcer部署" class="headerlink" title="Velcer部署"></a>Velcer部署</h2><p>点击<a href="https://vercel.com/new/git/third-party">部署</a></p><p>选择你的登录方式</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211209205228.png" alt=""></p><p>登录成功后，输入我的仓库链接：<code>https://github.com/hurangit/vercel-img</code></p><p>Continue</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211209211905.png" alt=""></p><p>输入你想要创建的仓库名</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211209210613.png" alt=""></p><p>然后点击Create</p><p>等到部署完成</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211209210704.png" alt=""></p><p>出现一下页面，并显示部署成功，就可以了。点击Go to Dashboard</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211209210746.png" alt=""></p><p>这个就是你的API链接，现在开始访问吧！！</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211209210857.png" alt=""></p><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><p>恭喜你，现在连随机图API也能白嫖了！！</p><h2 id="公益API"><a href="#公益API" class="headerlink" title="公益API"></a>公益API</h2><p>这是本教程所搭建的随机图API：<a href="https://api.huran.xyz/api">https://api.huran.xyz/api</a></p><p>具体图片和数量请看博客<a href="/photo/">相册</a></p>]]></content>
      
      
      <categories>
          
          <category> Vercel </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Vercel </tag>
            
            <tag> Github </tag>
            
            <tag> 随机图 </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Windows系统Bug创建加密文件夹</title>
      <link href="/post/99c5a280/"/>
      <url>/post/99c5a280/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>windows文件夹命名不能存在特殊符号，但是可以通过CMD命令来进行非法的命名。</p><p>在windows系统当中<code>..\</code>被解释成返回上一级目录，也就是说如果你的文件夹名字是这个，那就会形成以下特点</p><ul><li>无法打开</li><li>无法复制</li><li>无法移动</li><li>无法删除</li><li>占用始终显示0字节</li></ul><p>具体如下图</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211207165354.png" alt=""></p><p>已经过测试的系统</p><ul><li>Windows7   64位</li><li>Windows10 64位</li><li>Windows11 64位</li></ul><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>在你想要创建加密文件夹的目录下运行CMD（非Winodws Powershell）</p><p>创建名称为<code>test</code>的文件夹</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">md</span> test..\ </span><br></pre></td></tr></table></figure><p>打开名称为<code>test</code>的文件夹</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">start</span> test~<span class="number">1</span></span><br></pre></td></tr></table></figure><p>删除名称为<code>test</code>的文件夹</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rd</span> test..\</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>关于文件夹的名字是有要求的，仅可设置为2-3汉字，3-6字母，否则就会无法打开文件夹的。</p><p>删除时需要将文件夹内的东西全部删除后，才可删除文件夹。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 教程 </tag>
            
            <tag> Bug </tag>
            
            <tag> 加密文件夹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo在宝塔安装Hexo博客+butterfly主题</title>
      <link href="/post/3aede2af/"/>
      <url>/post/3aede2af/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>hexo博客应该不陌生，大多数人都是选择使用github来进行搭建，这样子也可以白嫖博客。但是总有人想要在服务器搭建（emm..就是我）。所以就有这一篇教程。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>其实跟用github搭建是一样的原理，就是将上传的服务器从github更换为了你的服务器。需要在你的服务器上面搭建一个git仓库。很简单</p><h2 id="搭建本地Hexo"><a href="#搭建本地Hexo" class="headerlink" title="搭建本地Hexo"></a>搭建本地Hexo</h2><p>首先我们搭建本地的Hexo博客</p><p>环境要求（注意配置好nodejs的环境配置）</p><ul><li>Nodejs（<a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">安装教程</a>）</li><li>Git（<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">安装教程</a>）</li></ul><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>首先创建一个你想要放置博客的目录，例如:<code>D:\hexoblog</code></p><p>然后在这个目录内右键-Git Bash Here，会弹出bash窗口，如下图</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205135650.png" alt=""></p><p>输入安装hexo代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g <span class="comment"># 安装Hexo</span></span><br></pre></td></tr></table></figure><p>等待安装完成，如下图（我市已经安装过了，所以运行这个命令属于是更新）</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205135939.png" alt=""></p><p>安装完成后，继续执行hexo的初始化命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="comment"># 初始化hexo</span></span><br></pre></td></tr></table></figure><p>期间可能会出错，如图：</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205140218.png" alt=""></p><p>这是由于连接github失败所导致的，因为github是国外网站，所以出错是正常的，反复的执行命令即可。</p><p>等待初始化完成后目录里就会多出很多文件，这就是hexo的文件。</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205141246.png" alt=""></p><p>初始化成功会显示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure><p>接下来生成静态文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>生成完毕后开启本地服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205141511.png" alt=""></p><h2 id="生成key"><a href="#生成key" class="headerlink" title="生成key"></a>生成key</h2><p>这一步跟github搭建是一样的需要一个key</p><h5 id="定义邮箱-更换为你的邮箱地址就行"><a href="#定义邮箱-更换为你的邮箱地址就行" class="headerlink" title="定义邮箱(更换为你的邮箱地址就行)"></a>定义邮箱(更换为你的邮箱地址就行)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;youemail&quot;</span></span><br></pre></td></tr></table></figure><h5 id="定义名称-更换自定义一个名称就行"><a href="#定义名称-更换自定义一个名称就行" class="headerlink" title="定义名称(更换自定义一个名称就行)"></a>定义名称(更换自定义一个名称就行)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;huran&quot;</span><br></pre></td></tr></table></figure><h5 id="生成ssh-公钥"><a href="#生成ssh-公钥" class="headerlink" title="生成ssh 公钥"></a>生成ssh 公钥</h5><p>在电脑桌面右击，点击Git Bash Here打开命令行终端，执行如下命令（直接按三次回车生成密钥）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>生成的文件默认在~/.ssh目录中，看到有id_rsa，id_rsa.pub这些文件即可， Win10中就是 我的电脑/C盘/用户/你自己的用户名/.ssh/ 就可以看到了，别问为啥，后期我们会用到。</p><h2 id="安装butterfly主题"><a href="#安装butterfly主题" class="headerlink" title="安装butterfly主题"></a>安装butterfly主题</h2><p>官方文档：<a href="https://butterfly.js.org/"><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安裝文檔(一) 快速開始 | Butterfly</a></a></p><p>参考官方文档使用npm安装方式进行安装，这里就不做过多的介绍了，文档里描述的很详细</p><h2 id="服务器搭建git仓库"><a href="#服务器搭建git仓库" class="headerlink" title="服务器搭建git仓库"></a>服务器搭建git仓库</h2><p>首先添加站点，PHP版本选择纯静态，其余的默认即可</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205141808.png" alt=""></p><p>创建完成后设置站点的配置文件，将root这一栏更改为 /var/hexo; 如下图：</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205142046.png" alt=""></p><p>设置完后保存即可。</p><p>接下来部署仓库，ssh连接到你的服务器</p><h5 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><h5 id="创建Git账户"><a href="#创建Git账户" class="headerlink" title="创建Git账户"></a>创建Git账户</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure><h5 id="添加账户权限"><a href="#添加账户权限" class="headerlink" title="添加账户权限"></a>添加账户权限</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>找到<br>Allow root to run any commands anywhere<br>root ALL=(ALL) ALL</p><p>添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><p>保存退出(按 Esc 键退出编辑模式，输入”:wq” 保存退出)并改回权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure><h5 id="设置git账户密码"><a href="#设置git账户密码" class="headerlink" title="设置git账户密码"></a>设置git账户密码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure><p>切换至git用户，创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>然后将前面本地电脑中生成的id_rsa.pub文件中的公钥复制到authorized_keys</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br><span class="line">chmod 700 /home/git/.ssh</span><br></pre></td></tr></table></figure><p>在本地Git终端中测试是否能免密登录git，其中下面SERVER为填写自己的云主机IP一定替换过来，执行输入yes后不用密码就说明好了（KK这里没有免密成功但是不影响使用，你如果也没有可以放弃直接下一步步骤，反正我这边暂时找不到原因放弃了只是后期需要输入密码，不过还行也就1秒钟的事情，嫌麻烦的可以自己想办法解决一下）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@SERVER</span><br></pre></td></tr></table></figure><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>repo作为为Git仓库目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/repo</span><br><span class="line">chown -R git:git /var/repo</span><br><span class="line">chmod -R 755 /var/repo</span><br></pre></td></tr></table></figure><h5 id="hexo作为网站根目录"><a href="#hexo作为网站根目录" class="headerlink" title="hexo作为网站根目录"></a>hexo作为网站根目录</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www</span><br><span class="line">mkdir /var/www/hexo</span><br><span class="line">chown -R git:git /var/hexo</span><br><span class="line">chmod -R 755 /var/hexo</span><br></pre></td></tr></table></figure><h5 id="然后创建一个裸的-Git-仓库-返回root目录创建。"><a href="#然后创建一个裸的-Git-仓库-返回root目录创建。" class="headerlink" title="然后创建一个裸的 Git 仓库,返回root目录创建。"></a>然后创建一个裸的 Git 仓库,返回root目录创建。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">cd /var/repo</span><br><span class="line">git init --bare hexo.git</span><br></pre></td></tr></table></figure><p>创建一个新的 Git 钩子，用于自动部署 在 /var/repo/hexo.git 下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>按 i 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># !/bin/bash</span><br><span class="line"></span><br><span class="line">git --work-tree=/var/hexo --git-dir=/var/repo/hexo.git checkout -f</span><br></pre></td></tr></table></figure><p>然后，按 Esc 键退出编辑模式，输入”:wq” 保存退出。</p><p>修改文件权限，使得其可执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /var/repo/hexoBlog.git/hooks/post-receive</span><br><span class="line">chmod +x /var/repo/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>到这里，我们的 Git 仓库算是完全搭建好了</p><h2 id="上传服务器"><a href="#上传服务器" class="headerlink" title="上传服务器"></a>上传服务器</h2><p>打开你本地的博客根目录，打开_config.yml，找到deploy，更换SERVER为你的域名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@SERVER:/var/repo/hexo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>保存</p><p>在博客根目录打开Git Bash Here，上传至服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>我在部署过程中，执行 hexo d发现部署老是出错，什么权限不允许之类的，这里我们需要检查我们在上述的git操作部署是否使用了git用户操作，若是没有，需要给相应的目录更改用户组 使用.</p><p>我们需要给权限输入下方命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /var/repo/</span><br></pre></td></tr></table></figure><p>这条命令递归的将repo目录及其子目录用户组设置为git。同时使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /var/www/hexo</span><br></pre></td></tr></table></figure><p>这样即可解决此类问题。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>有任何的问题留言即可。因为这边文章是我边部署边写的，中间出现的问题很少，基本没有报错的出现，所以无法规避你们的错误。如果遇到问题可以留言咨询。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Hexo-abbrlink插件生成唯一文章链接</title>
      <link href="/post/16808/"/>
      <url>/post/16808/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo的默认文章链接格式是年，月，日，标题这种格式来生成的。如果你的标题是中文的话，那你的URL链接就会包含中文，生成的链接如下图</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205103011.png" alt=""></p><p>复制后的URL路径就是把中文变成了一大堆字符串编码，如果你在其他地方用这边文章的url链接，偶然你又修改了改文章的标题，那这个URL链接就会失效。为了给每一篇文章来上一个属于自己的链接，写下此教程，利用<code>hexo-abbrlink</code>插件，A Hexo plugin to generate static post link based on post titles,来解决这个问题。 参考github官方： <a href="https%3A//github.com/Rozbo/hexo-abbrlink">hexo-abbrlink</a> 按照此教程配置完之后如下：</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205103230.png" alt=""></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在Hexo根目录安装插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>插件安装成功后，修改根目录的配置文件<code>_config.yml</code>找到<code>permalink</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="comment">#修改为</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">post/:abbrlink.html</span> <span class="comment"># post为自定义前缀</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">    <span class="attr">alg:</span> <span class="string">crc32</span>   <span class="comment">#算法： crc16(default) and crc32</span></span><br><span class="line">    <span class="attr">rep:</span> <span class="string">hex</span>     <span class="comment">#进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure><p>有两种设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alg -- Algorithm (currently support crc16 and crc32, which crc16 is default)</span><br><span class="line">rep -- Represent (the generated link could be presented in hex or dec value)</span><br></pre></td></tr></table></figure><p>crc16的最大数值为65535。如果一个缩写的链接已经存在，它会更改成另一个，并一次又一次地尝试…所以推荐使用crc32</p><h2 id="样本"><a href="#样本" class="headerlink" title="样本"></a>样本</h2><p>生成的链接将如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https://blog.huran.xyz/posts/66c8.html</span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https://blog.huran.xyz/posts/65535.html</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crc32 &amp; hex</span><br><span class="line">https://blog.huran.xyz/posts/8ddf18fb.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https://blog.huran.xyz/posts/1690090958.html</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>一切修改完毕后，清理本地的文件<code>hexo clean</code>，然后重新生成<code>hexo g</code></p><p>然后找到你的文章打开，该插件会在每篇文章的开头增加内容，如下图：</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205104638.png" alt=""></p><p>预览一下<code>hexo s</code>，访问一下你的本地连接查看成果吧。</p><p>没问题就可以上传<code>hexo d</code>使用了</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>欢迎收藏和转发，感谢你的支持！(๑•̀ㅂ•́) ✧</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> 文章 </tag>
            
            <tag> 链接格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Python脚本获得Typora正版授权</title>
      <link href="/post/27145/"/>
      <url>/post/27145/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>11月23日，Typora 正式发布 1.0 版本，进入了收费时代。<br>1.0 版本是一次性付费而非订阅的，只要支付人民币 89 元，可以在 3 台设备里使用。</p><h2 id="Typora之于我"><a href="#Typora之于我" class="headerlink" title="Typora之于我"></a>Typora之于我</h2><p>也是刚接触博客的搭建，第一次使用的是Wordpress博客。但是总觉的太过简洁，没有好看的主题就放弃了。后来通过朋友接触到了Hexo框架，直接吸引到了我。好处就是静态的Html页面带来极快浏览速度，而不好的地方也是显而易见。并没有Wordpress的后台管理，文章管理，也就是说写文章是需要用到Markdown的。这对于新手就是完全的不友好了，而我接触到的第一款Markdown编辑器就是Typora，用它的原因也很简单。</p><ul><li>轻盈、干净</li><li>所见即所得</li><li>图床</li><li>主题、生态</li></ul><p>曾经的免费软件，如今也进入收费阶段，不乏使用者被迫迁移至其他写作工具上。</p><h2 id="敬告"><a href="#敬告" class="headerlink" title="敬告"></a>敬告</h2><p><strong>请勿使用盗版，支持正版授权。</strong><br><strong>文中内容仅作学习和讨论，请不要从事任何非法行为。</strong><br><strong>由此产生的任何问题都将读者/用户（您）承担。</strong></p><h2 id="Begin"><a href="#Begin" class="headerlink" title="Begin"></a>Begin</h2><ol><li>下载所需要的代码文件(typoraCracker)</li></ol><div class="btns rounded grid5">            <a class="button" href='https://wwa.lanzouo.com/i9WV9x8f56h' title='蓝奏云'><i class='fas fa-download'></i>蓝奏云</a>          </div><p>下载完成后解压到任意位置得到typoraCracker文件夹</p><ol><li>环境配置</li></ol><ul><li>Python（<a href="https://blog.csdn.net/qq_34120459/article/details/86425559">教程</a>）</li><li>Node.js（<a href="https://blog.csdn.net/cai454692590/article/details/86093297">教程</a>）</li></ul><p>注意：python不要开虚拟环境</p><ol><li>安装依赖</li></ol><p>在<code>typoraCracker</code>文件夹内打开<code>Powershell</code>窗口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">python typora.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 测试是否安装完成</span></span><br></pre></td></tr></table></figure><p>安装成功则会显示下图。<br><img src="https://img.huran.xyz/2022/01/20/5iLyqwTt.png" alt="成功示意图"></p><ol><li>确认位置</li></ol><p>寻找<code>Typora</code>安装文件夹，并找到<code>app.asar</code>文件<br>默认位置为<code>C:\Program Files\Typora\resources\app.asar</code></p><ol><li>解包更换</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python typora.py  <span class="string">&quot;C:\Program Files\Typora\resources\app.asar&quot;</span> outfile/</span><br><span class="line"><span class="comment"># 将asar文件解包</span></span><br><span class="line">Copy-Item example/patch/License.js outfile/dec_app</span><br><span class="line"><span class="comment"># 复制并替换license文件</span></span><br><span class="line">python typora.py -u outfile/dec_app outfile/</span><br><span class="line"><span class="comment"># 重新打包asar文件</span></span><br><span class="line">node example/keygen.js</span><br><span class="line"><span class="comment"># 获取 key 一会用来激活代码呆这里</span></span><br></pre></td></tr></table></figure><p>注意<code>key</code>后续激活需要用到</p><ol><li>备份替换</li></ol><p>将原版<code>app.asar</code>改为<code>app.asar.bak</code>备份<br>将<code>outfile</code>文件夹内的<code>app.asar</code>粘贴到<code>C:\Program Files\Typora\resources\</code></p><ol><li>激活</li></ol><p>打开 <code>typora</code> 输入第5步中的<code>key</code>，邮箱随意。</p><h2 id="Enjoy"><a href="#Enjoy" class="headerlink" title="Enjoy"></a>Enjoy</h2><p><img src="https://img.huran.xyz/2022/01/20/twzuBxF2.png" alt="typora激活成功.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> 编辑器 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/16107/"/>
      <url>/post/16107/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
