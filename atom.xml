<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HuRan Blog</title>
  
  <subtitle>一个无趣之人的Blog</subtitle>
  <link href="https://blog.huran.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.huran.xyz/"/>
  <updated>2022-01-05T14:32:10.979Z</updated>
  <id>https://blog.huran.xyz/</id>
  
  <author>
    <name>HuRan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入浅出Linux的 I/O 原理</title>
    <link href="https://blog.huran.xyz/post/ec85537/"/>
    <id>https://blog.huran.xyz/post/ec85537/</id>
    <published>2022-01-05T14:12:44.000Z</published>
    <updated>2022-01-05T14:32:10.979Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>本文转载于 <a href="https://is-cloud.blog.csdn.net/article/details/105897963">云物互联</a> 仅作为记录学习</p><h2 id="传统的-System-Call-I-O"><a href="#传统的-System-Call-I-O" class="headerlink" title="传统的 System Call I/O"></a>传统的 System Call I/O</h2><p>在 Linux 系统中，传统的访问方式是通过 write() 和 read() 两个系统调用实现的，通过 read() 函数读取文件到到缓存区中，然后通过 write() 方法把缓存中的数据输出到网络端口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read(file_fd, tmp_buf, len);</span><br><span class="line">write(socket_fd, tmp_buf, len);</span><br></pre></td></tr></table></figure><p>下图分别对应传统 I/O 操作的数据读写流程，整个过程涉及 2 次 CPU 拷贝、2 次 DMA 拷贝，总共 4 次拷贝，以及 4 次上下文切换。</p><ul><li><strong>CPU 拷贝：</strong>由 CPU 直接处理数据的传送，数据拷贝时会一直占用 CPU 的资源。</li><li><strong>DMA 拷贝：</strong>由 CPU 向 DMA 磁盘控制器下达指令，让 DMA 控制器来处理数据的传送，数据传送完毕再把信息反馈给 CPU，从而减轻了 CPU 资源的占有率。</li><li><strong>上下文切换：</strong>当用户程序向内核发起系统调用时，CPU 将用户进程从用户态切换到内核态；当系统调用返回时，CPU 将用户进程从内核态切换回用户态。</li></ul><h2 id="读操作"><a href="#读操作" class="headerlink" title="读操作"></a>读操作</h2><p>当应用程序执行 read 系统调用读取一块数据的时候，如果这块数据已经存在于用户进程的页内存中，就直接从内存中读取数据。<br>​</p><p>如果数据不存在，则先将数据从磁盘加载数据到内核空间的读缓存（Read Buffer）中，再从读缓存拷贝到用户进程的页内存中。<br><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.1/20220105221445.jpg" alt="20220105221445.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read(file_fd, tmp_buf, len);</span><br></pre></td></tr></table></figure><p>基于传统的 I/O 读取方式，read 系统调用会触发 2 次上下文切换，1 次 DMA 拷贝和 1 次 CPU 拷贝。<br>发起数据读取的流程如下：</p><ul><li>用户进程通过 read() 函数向 Kernel 发起 System Call，上下文从 user space 切换为 kernel space。</li><li>CPU 利用 DMA 控制器将数据从主存或硬盘拷贝到 kernel space 的读缓冲区（Read Buffer）。</li><li>CPU 将读缓冲区（Read Buffer）中的数据拷贝到 user space 的用户缓冲区（User Buffer）。</li><li>上下文从 kernel space 切换回用户态（User Space），read 调用执行返回。</li></ul><h2 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h2><p>当应用程序准备好数据，执行 write 系统调用发送网络数据时，先将数据从用户空间的页缓存拷贝到内核空间的网络缓冲区（Socket Buffer）中，然后再将写缓存中的数据拷贝到网卡设备完成数据发送。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write(socket_fd, tmp_buf, len);</span><br></pre></td></tr></table></figure><p>基于传统的 I/O 写入方式，write() 系统调用会触发 2 次上下文切换，1 次 CPU 拷贝和 1 次 DMA 拷贝。<br>用户程序发送网络数据的流程如下：</p><ul><li>用户进程通过 write() 函数向 kernel 发起 System Call，上下文从 user space 切换为 kernel space。</li><li>CPU 将用户缓冲区（User Buffer）中的数据拷贝到 kernel space 的网络缓冲区（Socket Buffer）。</li><li>CPU 利用 DMA 控制器将数据从网络缓冲区（Socket Buffer）拷贝到 NIC 进行数据传输。</li><li>上下文从 kernel space 切换回 user space，write 系统调用执行返回。</li></ul><h2 id="网络-I-O"><a href="#网络-I-O" class="headerlink" title="网络 I/O"></a>网络 I/O</h2><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.1/20220105221600.jpg.jpg" alt="20220105221600.jpg"></p><h2 id="磁盘-I-O"><a href="#磁盘-I-O" class="headerlink" title="磁盘 I/O"></a>磁盘 I/O</h2><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.1/20220105221644.jpg" alt="20220105221644.jpg"></p><h2 id="高性能优化的-I-O"><a href="#高性能优化的-I-O" class="headerlink" title="高性能优化的 I/O"></a>高性能优化的 I/O</h2><ul><li><strong>零拷贝技术。</strong></li><li><strong>多路复用技术。</strong></li><li><strong>页缓存（PageCache）技术。</strong></li></ul><p>其中，<strong>页缓存（PageCache）</strong>是操作系统对文件的缓存，用来减少对磁盘的 I/O 操作，以页为单位的，内容就是磁盘上的物理块，页缓存能帮助程序对文件进行顺序读写的速度几乎接近于内存的读写速度，主要原因就是由于 OS 使用 PageCache 机制对读写访问操作进行了性能优化。<br>​</p><p><strong>页缓存读取策略：</strong>当进程发起一个读操作 （比如，进程发起一个 read() 系统调用），它首先会检查需要的数据是否在页缓存中：</p><ul><li><strong>如果在</strong>，则放弃访问磁盘，而直接从页缓存中读取。</li><li><strong>如果不在</strong>，则内核调度块 I/O 操作从磁盘去读取数据，并读入紧随其后的少数几个页面（不少于一个页面，通常是三个页面），然后将数据放入页缓存中。</li></ul><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.1/20220105221731.jpg" alt="20220105221731.jpg"><br><strong>页缓存写策略：</strong>当进程发起 write 系统调用写数据到文件中，先写到页缓存，然后方法返回。此时数据还没有真正的保存到文件中去，Linux 仅仅将页缓存中的这一页数据标记为 “脏”，并且被加入到脏页链表中。</p><p>然后，由 flusher 回写线程周期性将脏页链表中的页写到磁盘，让磁盘中的数据和内存中保持一致，最后清理“脏”标识。在以下三种情况下，脏页会被写回磁盘：</p><ul><li>空闲内存低于一个特定阈值。</li><li>脏页在内存中驻留超过一个特定的阈值时。</li><li>当用户进程调用 sync() 和 fsync() 系统调用时。</li></ul><h2 id="存储设备的-I-O-栈"><a href="#存储设备的-I-O-栈" class="headerlink" title="存储设备的 I/O 栈"></a>存储设备的 I/O 栈</h2><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.1/20220105221800.jpg" alt="20220105221800.jpg"><br>由图可见，从系统调用的接口再往下，Linux 下的 IO 栈致大致有三个层次：</p><ul><li><strong>文件系统层</strong>，以 write 为例，内核拷贝了 write 参数指定的用户态数据到文件系统 Cache 中，并适时向下层同步。</li><li><strong>块层</strong>，管理块设备的 IO 队列，对 IO 请求进行合并、排序（还记得操作系统课程学习过的 IO 调度算法吗？)。</li><li><strong>设备层</strong>，通过 DMA 与内存直接交互，完成数据和具体设备之间的交互。</li></ul><p>结合这个图，想想 Linux 系统编程里用到的 <strong>Buffered IO、mmap、Direct IO</strong>，这些机制怎么和 <strong>Linux I/O</strong> 栈联系起来呢？上面的图有点复杂，我画一幅简图，把这些机制所在的位置添加进去：</p><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.1/20220105221819.jpg" alt="20220105221819.jpg"><br>这下一目了然了吧？<strong>传统的 Buffered IO</strong> 使用 read 读取文件的过程什么样的？假设要去读一个冷文件（Cache 中不存在），open 打开文件内核后建立了一系列的数据结构，接下来调用 read，到达文件系统这一层，发现 Page Cache 中不存在该位置的磁盘映射，然后创建相应的 <strong>Page Cache</strong> 并和相关的扇区关联。然后请求继续到达块设备层，在 IO 队列里排队，接受一系列的调度后到达设备驱动层，此时一般使用 <strong>DMA</strong> 方式读取相应的磁盘扇区到 Cache 中，然后 read 拷贝数据到用户提供的<strong>用户态 buffer </strong>中去（read 的参数指出的)。</p><p><strong>整个过程有几次拷贝？</strong>从磁盘到 Page Cache 算第一次的话，从 Page Cache 到用户态 buffer 就是第二次了。而 mmap 做了什么？mmap 直接把 Page Cache 映射到了用户态的地址空间里了，所以 mmap 的方式读文件是没有第二次拷贝过程的。<br>​</p><p><strong>那 Direct IO 做了什么？</strong>这个机制更狠，直接让用户态和块 IO 层对接，直接放弃 Page Cache，从磁盘直接和用户态拷贝数据。好处是什么？写操作直接映射进程的 buffer 到磁盘扇区，以 DMA 的方式传输数据，减少了原本需要到 Page Cache 层的一次拷贝，提升了写的效率。对于读而言，第一次肯定也是快于传统的方式的，但是之后的读就不如传统方式了（当然也可以在用户态自己做 Cache，有些商用数据库就是这么做的）。<br>​</p><p>除了传统的 Buffered IO 可以比较自由的用偏移+长度的方式读写文件之外，mmap 和 Direct IO 均有数据按页对齐的要求，Direct IO 还限制读写必须是底层存储设备块大小的整数倍（甚至 Linux 2.4 还要求是文件系统逻辑块的整数倍）。所以接口越来越底层，换来表面上的效率提升的背后，需要在应用程序这一层做更多的事情。所以想用好这些高级特性，除了深刻理解其背后的机制之外，也要在系统设计上下一番功夫。</p><h2 id="I-O-Buffering"><a href="#I-O-Buffering" class="headerlink" title="I/O Buffering"></a>I/O Buffering</h2><p><img src="https://unpkg.zhimg.com/hexo-post-img@1.0.1/20220105221855.jpg" alt="20220105221855.jpg"><br>如图，当程序调用各类文件操作函数后，用户数据（User Data）到达磁盘（Disk)的流程如图所示。<br>图中描述了 Linux 下文件操作函数的层级关系和内存缓存层的存在位置。中间的黑色实线是用户态和内核态的分界线。<br>从上往下分析这张图： 1.首先是 C 语言 stdio 库定义的相关文件操作函数，这些都是用户态实现的跨平台封装函数。stdio 中实现的文件操作函数有自己的 stdio buffer，这是在用户态实现的缓存。此处使用缓存的原因很简单 — 系统调用总是昂贵的。如果用户代码以较小的 size 不断的读或写文件的话，stdio 库将多次的读或者写操作通过 buffer 进行聚合是可以提高程序运行效率的。stdio 库同时也支持 fflush 函数来主动的刷新 buffer，主动的调用底层的系统调用立即更新 buffer 里的数据。特别地，setbuf 函数可以对 stdio 库的用户态 buffer 进行设置，甚至取消 buffer 的使用。</p><p>2.<strong>系统调用的 read/write 和真实的磁盘读写之间也存在一层 buffer</strong>，这里用术语 Kernel buffer cache 来指代这一层缓存。在 Linux 下，文件的缓存习惯性的称之为 Page Cache，而更低一级的设备的缓存称之为 Buffer Cache。这两个概念很容易混淆，这里简单的介绍下概念上的区别：Page Cache 用于缓存文件的内容，和文件系统比较相关。文件的内容需要映射到实际的物理磁盘，这种映射关系由文件系统来完成；Buffer Cache 用于缓存存储设备块（比如磁盘扇区）的数据，而不关心是否有文件系统的存在（文件系统的元数据缓存在 Buffer Cache 中）。<br>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="Linux" scheme="https://blog.huran.xyz/categories/Linux/"/>
    
    <category term="知识" scheme="https://blog.huran.xyz/categories/Linux/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Linux" scheme="https://blog.huran.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>登顶吾爱的小工具，这软件时机来得刚刚好！</title>
    <link href="https://blog.huran.xyz/post/3f42529/"/>
    <id>https://blog.huran.xyz/post/3f42529/</id>
    <published>2022-01-04T08:18:44.000Z</published>
    <updated>2022-01-04T08:31:06.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近疫情严重了，很多地方都出现了本地确诊病例，尤其是西安，其他地方也已经严格管控了。疫情历经了接近两年，大家对于疫情也没那么恐慌，按照规定，该干嘛干嘛，不给国家添乱，不给社会添堵。</p><p>虽然说疫情已经成为了一场持久战，但是疫情并未松懈。特别是身处外地的小伙伴，快过年了，肯定更加关注疫情变化。但是疫情的信息去哪里查才好呢？<br>​</p><p>来，看看吾爱的一软件作者开发出来的这款小工具，看他怎么说~</p><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p>据介绍，软件的作者比较关注疫情，而无论是百度的疫情动态，还是腾讯的动态，数据都不完整，于是作者整合了两大平台数据，开发出了这款“疫情数据关注工具”。<br>​</p><p>这款工具腾讯哈勃检测是无毒，可放心使用。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.8/20220104161941.jpg" alt="20220104161941.jpg"><br>软件是单文件版本，其因为是整合腾讯与百度的疫情动态，所以一定要连网才能使用。</p><p>这个软件作者做得还是非常详细的，本土现有确认、现有确诊、累计确诊、无症状感染者、境外输入的数据全都有，而且还有每个数据都有“较昨日”的数据对比。下面还罗列了高风险区域和中风险地区。<br>​</p><p><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.8/20220104161838.jpg" alt="20220104161838.jpg"><br>除了数据罗列的方式，软件还有本土现有确诊柱状图，非常直观。</p><p><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.8/20220104162009.jpg" alt="20220104162009.jpg"><br>软件还有本地现有的饼状图，目前是陕西西安占绝大多数，大家如没必要，不要出行，如有必要也要避开高风险地区。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.8/20220104162034.jpg" alt="20220104162034.jpg"><br>在疫情还非常严峻的今天，我觉得有必要经常关注疫情，特别是临近春节了，大家更应该多多关注。软件就介绍到这里啦，感兴趣的小伙伴文末获取叭~~~</p><h2 id="软件获取"><a href="#软件获取" class="headerlink" title="软件获取"></a>软件获取</h2><div class="btns rounded grid5">            <a class="button" href='https://huran.lanzout.com/iMeVwyd63of' title='蓝奏云'><i class='fas fa-download'></i>蓝奏云</a>          </div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="Windows" scheme="https://blog.huran.xyz/categories/Windows/"/>
    
    <category term="工具" scheme="https://blog.huran.xyz/categories/Windows/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Windows" scheme="https://blog.huran.xyz/tags/Windows/"/>
    
    <category term="工具" scheme="https://blog.huran.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="疫情" scheme="https://blog.huran.xyz/tags/%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>1+1&gt;2，数据告诉你为什么内存条2根小的比1根大的强</title>
    <link href="https://blog.huran.xyz/post/7fee4a75/"/>
    <id>https://blog.huran.xyz/post/7fee4a75/</id>
    <published>2022-01-04T07:52:44.000Z</published>
    <updated>2022-01-04T08:32:20.041Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>我们通常认为参数相同的前提下，单个硬件的表现优于多个硬件的组合，因为它的集成度更高，可以避免协同造成的性能损失。</p><p>但如果你自己折腾过电脑的话，可能知道电脑内存条更推荐买两根小的，这样得到的效果比单根大的更好。</p><p>为什么会这样？1+1&gt;2 是否随时都有效？<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154405.jpg" alt="20220104154405.jpg"></p><h2 id="多个内存多条路"><a href="#多个内存多条路" class="headerlink" title="多个内存多条路"></a>多个内存多条路</h2><p>我们可以把硬件间的数据传输想象成马路上奔跑的车辆，当有大量车辆需要通行时（大量读写数据），在不堵车的情况下，道路越宽可以通行的车辆就越多，数据传输量就越大。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154451.jpg" alt="20220104154451.jpg"><br>传输数据的马路在电脑中叫做「总线」，它的频率和带宽是固定的，由主板的设计决定。频率越高，车辆的限速就越高，跑得越快，<strong>数据传输速度也更快；</strong>带宽越大，车道的宽度就越大，容量的车辆也越多，<strong>同时传输的数据量就更大。</strong></p><hr><p>在电脑内存发展的中期，因为主板接口通常使用串联设计，内存条不管安装多少根，都只走一条路线传输数据。假如总线带宽为 64-bit，当内存传的带宽达到 64-bit 时，不管加再多内存条也不会突破总线上限。于是就出现了瓶颈。</p><p>为了解决这个问题，主板接口引入并联设计，<strong>每个接口享用独立的传输数据通道。</strong>原本两根内存条的数据挤一个通道，现在多出一个通道，理论带宽翻倍达到 128-bit。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154522.jpg" alt="20220104154522.jpg"><br><strong>这种安装两根内存条，享受两根数据传输通道的做法我们称为「双通道」。</strong></p><hr><p>想要知道自己目前是否为双通道，可以下载 CPU-Z，在内存选项卡中会表明目前的状态。（并不是插两根内存条就是双通道，后面讲原因）<img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154547.jpg" alt="20220104154547.jpg"></p><h2 id="多通道"><a href="#多通道" class="headerlink" title="多通道"></a>多通道</h2><p>有些主板上不止两个内存插糟，那么是否也有三通道、四通道呢？答案是肯定的。但是情况要比双通道复杂的多得。</p><p>现在的 CPU 和主板都支持双通道，但对三通道的支持却并不常见。</p><p>假如同时插 3 根 8GB 内存条，理论上三通道应该是 64<em>3bit。但实际的情况多半是前两根组成了双通道 64</em>2bit，第三根依然是单通道 64bit，最终结果是 64*2bit <strong>+</strong> 64bit。</p><p><strong>这种情况称为「非对称双通道」，依然是双通道。</strong><br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154617.jpg" alt="20220104154617.jpg"></p><p>看起来 64<em>3 和 64</em>2+64 的计算结果是一样的？然而表面数值和实际情况往往有很大差别。</p><p>因为我们要<strong>把双通道看成一个性能升级的整体，</strong>我们打开一个程序，系统很可能会将这个程序的数据拆分为双份，分配给双通道的两根内存条，以享受更高的带宽。</p><p>假如我们打开了聊天、浏览器、Word 等这种不怎么需要用内存大量传输数据的程序，它们占用了双通道内存。</p><p>此时再打开一个游戏或视频剪辑软件这种需要大量内存空间的程序，因为双通道空间不足，它就只能使用单通道的 8GB 内存。</p><p>这样的分配显然不合理，「三通道」很可能反而不如双通道。</p><p><strong>因为双通道内存中的数据不会与单通道共享。</strong></p><p><strong>​</strong>当然也有特殊的主板 CPU 是支持真正的三通道，但是比较少见。</p><p><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154641.jpg" alt="20220104154641.jpg"><br>支持的四通道的主板也少，服务器比较多见。（主板上并不是一个内存插槽就是一个通道，后面讲原因）<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154646.jpg" alt="20220104154646.jpg"></p><h2 id="别抱太大期望"><a href="#别抱太大期望" class="headerlink" title="别抱太大期望"></a>别抱太大期望</h2><p>带宽翻倍这事情听起来很厉害，毕竟数据传输量翻倍，但实际体验远没有纸面数据那么夸张。</p><p>下面是单通道 8GB DDR3 与双通道 8GB（4+4GB）DDR3 的测试数据对比，<strong>橙色为双通道，蓝色为单通道。</strong><br><strong>​</strong></p><p><strong>Euler 3D</strong><br>在 Euler 3D 基准测试中，双通道的性能比单通道强大约 17％。对于执行高负荷运算，仿真和编译的朋友，这个测试比较有参考价值。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154736.jpg" alt="20220104154736.jpg"><br><strong>复制，读写和带宽</strong><br>这项测试可以明显看出带宽提升带来的性能提升，虽然提升 20% 也很明显，但还远未达到所谓翻倍效果。<img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154749.jpg" alt="20220104154749.jpg"><br><strong>内存延迟</strong><br>延迟是指数据传输指令送达后到开始传输数据之间的延迟。双通道的延迟能够缩短约 2.7％ 的，仍然略优于单通道。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154822.jpg" alt="20220104154822.jpg"><br><strong>视频转码</strong><br>Handbrake 是一个强大的工具，可以将电脑性能推到极限，双通道在视频转码工作上大约有 4.5% 的优势。即使对于视频翻录或转码有重度需求的朋友，这点点提升也是微乎其微。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154833.jpg" alt="20220104154833.jpg"><br><strong>Adobe Premiere</strong><br>这是目前最常用的视频剪辑软件，基准测试中，双通道省了大约 8 秒的总体渲染时间，测试中渲染的视频比较短，如果全天渲染的话差距可能会提升到十几到几十分钟。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154911.jpg" alt="20220104154911.jpg"><br><strong>游戏测试</strong><br>最后是大家比较关心的游戏性能，在搭配 GTX 1060 显卡时，得到的结果与前面大致相同，双通道可以略微提升几帧。但有时双通道的性能反而会下降，这点在巫师 3 中格外明显。原因可能是因为游戏的优化问题。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154923.jpg" alt="20220104154923.jpg"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>对于双通道并不是双根内存条插上就完事了，它还有很多限制。</p><p>1、最简单的做法就是使用两根同品牌、同型号、同容量、同频率的一模一样的内存条，这样得到的效果最佳也最省心。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104154950.jpg" alt="20220104154950.jpg"><br>2、当两根内存条容量不同时，例如 4GB+8GB 也能组成双通道，实际上的效果是 8GB 的前 4GB 加入双通道，后 4GB 自成一派，得到「不对称双通道」。</p><p>3、两根不同频率的内存条，例如 2400Hz 和 2666Hz 也能组成双通道，实际上的效果是高频自动降为低频，最终就是 2400Hz 的双通道。（请先了解主板最高支持多少频率）</p><p>4、DDR4 与 DDR3 无法组成双通道，不过也很少有主板同时支持两代内存条，插槽都不一样。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104155006.jpg" alt="20220104155006.jpg"><br>5、有 4 个内存插槽的主板通常是双通道。如下图，两个相邻插槽为一个通道。这一点非常非常重要，大多数人都是两根内存条条组成双通道，但是有四个插槽，一些有强迫症又不看说明书的朋友就会挨着插，这样其实都插到一个通道里了，无法组成双通道！<img src="https://unpkg.zhimg.com/hexo-img-post@1.0.7/20220104155018.jpg" alt="20220104155018.jpg"><br>如果只有两根内存条，最佳做法是先插 <strong>A2 </strong>和 <strong>B2</strong>，如果只有一根内存条就先插 <strong>A2</strong>，也就是先用离 CPU 远的插槽(远端)。</p><p>之所以这样做是因为在同一通道内，如果远端没有内存条，它会有信号反射的现象，<strong>A2</strong> 的信号又反射回 <strong>A1</strong>，造成信号干扰，影响性能的发挥。</p><p>当然，为了提高容错率，<strong>A1</strong>+<strong>B2</strong>，<strong>A2</strong>+<strong>B1</strong>也是能够组成双通道的，只是建议大家使用最佳组合，特别是需要超频的朋友。</p><p>6、4+4+8 也能组成双通道，正如上一条说的两个相邻插槽为一个通道，所以将两根 4GB 内存条插入 <strong>A 组</strong>，8GB 插入 <strong>B 组</strong>，依然能够组成双通道。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>双通道确实能够获得 1+1&gt;2 的效果，但可能只有 2.1 与 2 的区别。</p><p>2022 年小淙并不建议 4+4 的组合，因为后续的提升限制比较多。</p><p>如果你的预算不够，应该先买一根 8GB 或 16GB，手头宽裕了再提升到 8+8 或 16+16 的组合。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="Windows" scheme="https://blog.huran.xyz/categories/Windows/"/>
    
    <category term="知识" scheme="https://blog.huran.xyz/categories/Windows/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Windows" scheme="https://blog.huran.xyz/tags/Windows/"/>
    
    <category term="内存" scheme="https://blog.huran.xyz/tags/%E5%86%85%E5%AD%98/"/>
    
    <category term="知识" scheme="https://blog.huran.xyz/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Twikoo添加图片点击放大功能</title>
    <link href="https://blog.huran.xyz/post/22ab2c3c/"/>
    <id>https://blog.huran.xyz/post/22ab2c3c/</id>
    <published>2022-01-01T09:19:44.000Z</published>
    <updated>2022-01-01T09:29:11.770Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><strong>转自 </strong><a href="https://www.bilibilianime.com/2021/07/16/twikoo-img-zoom/"><strong>为 butterfly 主题的 twikoo 添加图片点击放大功能</strong></a><strong>仅为学习记录。 </strong></p><p>主题目录\layout\includes\third-party\comments<br>修改 twikoo.pug，大概在第 5 行左右的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">twikoo.init(<span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#twikoo-wrap&#x27;</span>,</span><br><span class="line">  <span class="attr">envId</span>: <span class="string">&#x27;!&#123;theme.twikoo.envId&#125;&#x27;</span>,</span><br><span class="line">  <span class="attr">region</span>: <span class="string">&#x27;!&#123;theme.twikoo.region&#125;&#x27;</span>,</span><br><span class="line">  <span class="attr">onCommentLoaded</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span>.mediumZoom!=<span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> zoomComment = mediumZoom(<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.tk-content :not(a)&gt;img&#x27;</span>))</span><br><span class="line">      zoomComment.on(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> photoBg = <span class="built_in">document</span>.documentElement.getAttribute(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;dark&#x27;</span> ? <span class="string">&#x27;#121212&#x27;</span> : <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">        zoomComment.update(&#123;</span><br><span class="line">          <span class="attr">background</span>: photoBg</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(GLOBAL_CONFIG.lightbox === <span class="string">&#x27;fancybox&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> addFancybox = <span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">const</span> runFancybox = <span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">            ele.each(<span class="function"><span class="keyword">function</span> (<span class="params">i, o</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">const</span> $this = $(o)</span><br><span class="line">              <span class="keyword">const</span> lazyloadSrc = $this.attr(<span class="string">&#x27;data-lazy-src&#x27;</span>) || $this.attr(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">              <span class="keyword">const</span> dataCaption = $this.attr(<span class="string">&#x27;alt&#x27;</span>) || <span class="string">&#x27;&#x27;</span></span><br><span class="line">              $this.wrap(<span class="string">`&lt;a href=&quot;<span class="subst">$&#123;lazyloadSrc&#125;</span>&quot; data-fancybox=&quot;group&quot; data-caption=&quot;<span class="subst">$&#123;dataCaption&#125;</span>&quot; class=&quot;fancybox&quot;&gt;&lt;/a&gt;`</span>)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            $().fancybox(&#123;</span><br><span class="line">              <span class="attr">selector</span>: <span class="string">&#x27;[data-fancybox]&#x27;</span>,</span><br><span class="line">              <span class="attr">loop</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">transitionEffect</span>: <span class="string">&#x27;slide&#x27;</span>,</span><br><span class="line">              <span class="attr">protect</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">buttons</span>: [<span class="string">&#x27;slideShow&#x27;</span>, <span class="string">&#x27;fullScreen&#x27;</span>, <span class="string">&#x27;thumbs&#x27;</span>, <span class="string">&#x27;close&#x27;</span>],</span><br><span class="line">              <span class="attr">hash</span>: <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> $.fancybox === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">            $(<span class="string">&#x27;head&#x27;</span>).append(<span class="string">`&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;<span class="subst">$&#123;GLOBAL_CONFIG.source.fancybox.css&#125;</span>&quot;&gt;`</span>)</span><br><span class="line">            $.getScript(<span class="string">`<span class="subst">$&#123;GLOBAL_CONFIG.source.fancybox.js&#125;</span>`</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              runFancybox($(ele))</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            runFancybox($(ele))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      addFancybox(<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.tk-content :not(a)&gt;img&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, !&#123;<span class="built_in">JSON</span>.stringify(theme.twikoo.option)&#125;))</span><br></pre></td></tr></table></figure><p>完整版</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">script.</span><br><span class="line">  (<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> $countDom = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;twikoo-count&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> init = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      twikoo.init(<span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#twikoo-wrap&#x27;</span>,</span><br><span class="line">        <span class="attr">envId</span>: <span class="string">&#x27;!&#123;theme.twikoo.envId&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">region</span>: <span class="string">&#x27;!&#123;theme.twikoo.region&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">onCommentLoaded</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.mediumZoom != <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> zoomComment = mediumZoom(<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.tk-content :not(a)&gt;img&#x27;</span>))</span><br><span class="line">            zoomComment.on(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> photoBg = <span class="built_in">document</span>.documentElement.getAttribute(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;dark&#x27;</span> ? <span class="string">&#x27;#121212&#x27;</span> : <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">              zoomComment.update(&#123;</span><br><span class="line">                <span class="attr">background</span>: photoBg</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (GLOBAL_CONFIG.lightbox === <span class="string">&#x27;fancybox&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> addFancybox = <span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">const</span> runFancybox = <span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">                ele.each(<span class="function"><span class="keyword">function</span> (<span class="params">i, o</span>) </span>&#123;</span><br><span class="line">                  <span class="keyword">const</span> $this = $(o)</span><br><span class="line">                  <span class="keyword">const</span> lazyloadSrc = $this.attr(<span class="string">&#x27;data-lazy-src&#x27;</span>) || $this.attr(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">                  <span class="keyword">const</span> dataCaption = $this.attr(<span class="string">&#x27;alt&#x27;</span>) || <span class="string">&#x27;&#x27;</span></span><br><span class="line">                  $this.wrap(<span class="string">`&lt;a href=&quot;<span class="subst">$&#123;lazyloadSrc&#125;</span>&quot; data-fancybox=&quot;group&quot; data-caption=&quot;<span class="subst">$&#123;dataCaption&#125;</span>&quot; class=&quot;fancybox&quot;&gt;&lt;/a&gt;`</span>)</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                $().fancybox(&#123;</span><br><span class="line">                  <span class="attr">selector</span>: <span class="string">&#x27;[data-fancybox]&#x27;</span>,</span><br><span class="line">                  <span class="attr">loop</span>: <span class="literal">true</span>,</span><br><span class="line">                  <span class="attr">transitionEffect</span>: <span class="string">&#x27;slide&#x27;</span>,</span><br><span class="line">                  <span class="attr">protect</span>: <span class="literal">true</span>,</span><br><span class="line">                  <span class="attr">buttons</span>: [<span class="string">&#x27;slideShow&#x27;</span>, <span class="string">&#x27;fullScreen&#x27;</span>, <span class="string">&#x27;thumbs&#x27;</span>, <span class="string">&#x27;close&#x27;</span>],</span><br><span class="line">                  <span class="attr">hash</span>: <span class="literal">false</span></span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">typeof</span> $.fancybox === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">                $(<span class="string">&#x27;head&#x27;</span>).append(<span class="string">`&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;<span class="subst">$&#123;GLOBAL_CONFIG.source.fancybox.css&#125;</span>&quot;&gt;`</span>)</span><br><span class="line">                $.getScript(<span class="string">`<span class="subst">$&#123;GLOBAL_CONFIG.source.fancybox.js&#125;</span>`</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                  runFancybox($(ele))</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                runFancybox($(ele))</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            addFancybox(<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.tk-content :not(a)&gt;img&#x27;</span>))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, !&#123;<span class="built_in">JSON</span>.stringify(theme.twikoo.option)&#125;))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> getCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      twikoo.getCommentsCount(&#123;</span><br><span class="line">        <span class="attr">envId</span>: <span class="string">&#x27;!&#123;theme.twikoo.envId&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">region</span>: <span class="string">&#x27;!&#123;theme.twikoo.region&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">urls</span>: [<span class="built_in">window</span>.location.pathname],</span><br><span class="line">        <span class="attr">includeReply</span>: <span class="literal">false</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        $countDom.innerText = res[<span class="number">0</span>].count</span><br><span class="line">      &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> loadTwikoo = <span class="function">(<span class="params">bool = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> twikoo === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        init()</span><br><span class="line">        bool &amp;&amp; $countDom &amp;&amp; <span class="built_in">setTimeout</span>(getCount,<span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        getScript(<span class="string">&#x27;!&#123;theme.CDN.twikoo&#125;&#x27;</span>).then(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">          init()</span><br><span class="line">          bool &amp;&amp; $countDom &amp;&amp; <span class="built_in">setTimeout</span>(getCount,<span class="number">0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;!&#123;theme.comments.use[0]&#125;&#x27;</span> === <span class="string">&#x27;Twikoo&#x27;</span> || !!&#123;theme.comments.lazyload&#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!&#123;theme.comments.lazyload&#125;) btf.loadComment(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;twikoo-wrap&#x27;</span>), loadTwikoo)</span><br><span class="line">      <span class="keyword">else</span> loadTwikoo(<span class="literal">true</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.loadOtherComment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        loadTwikoo()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="Hexo" scheme="https://blog.huran.xyz/categories/Hexo/"/>
    
    <category term="教程" scheme="https://blog.huran.xyz/categories/Hexo/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="twikoo" scheme="https://blog.huran.xyz/tags/twikoo/"/>
    
    <category term="评论" scheme="https://blog.huran.xyz/tags/%E8%AF%84%E8%AE%BA/"/>
    
    <category term="图片" scheme="https://blog.huran.xyz/tags/%E5%9B%BE%E7%89%87/"/>
    
    <category term="放大" scheme="https://blog.huran.xyz/tags/%E6%94%BE%E5%A4%A7/"/>
    
  </entry>
  
  <entry>
    <title>一款只有870K的工具，弥补Windows的不足！</title>
    <link href="https://blog.huran.xyz/post/dd140b41/"/>
    <id>https://blog.huran.xyz/post/dd140b41/</id>
    <published>2021-12-29T13:41:44.000Z</published>
    <updated>2021-12-29T14:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="啰嗦几句"><a href="#啰嗦几句" class="headerlink" title="啰嗦几句"></a>啰嗦几句</h2><p>虽然 win11 正式版都已经上线了，但不排除有些小伙伴确实还在用着 win7 或者 winXP 的系统，且不说电脑又老又旧，玩游戏是没可能，就日常的办公它都成问题。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.4/20211229212612.jpg" alt=""><br>电脑卡顿的原因有硬件问题也有软件问题。就电脑内存来说，如果开的程序太多，会耗尽你电脑的 RAM(随机存取内存)，使得你的电脑系统变得缓慢或没有反应，而需要清理内存并不太容易。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.4/20211229212620.gif" alt="20211229212620.gif"><br>今天给大家介绍一款国外的专业的内存清理软件，能拯救你那蜗牛一样的电脑反应速度，来看看叭~~~</p><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p>这款是国外的软件，支持 32 位和 64 位，而且支持的操作系统从 winXP 一路到 win11，基本市面上所有的 win 操作系统都能支持。<br>打开软件，我们可以看到目前的电脑的使用率，我的电脑目前使用为 44%，已经用了 6.9G 的内存。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.4/20211229212926.png" alt="20211229212926.png"><br>点击【优化】后，电脑的内存已用变为了 3.5G，帮我清出了 3.4G 的内存。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.4/20211229213050.png" alt="20211229213050.png"><br>我自己的电脑还好，有 16G 内存，对于一些老旧电脑，用这款清理以后，能明显感觉电脑快了不少。<br>好多人会想到 360 的加速球，因为加速球也可能清理内存，但 360 加速球并不能独立安装。为了清个内存而安装一个更占内存的软件，这太不划算了。<br><img src="https://unpkg.zhimg.com/hexo-img-post@1.0.4/20211229213352.png" alt="20211229213352.png"><br>在【选项】中，我们可以设置随机启动，还可以选择任务栏图标。最实用的是可以<strong>设置阈值</strong> ，如果电脑系统超过了设定的阈值，软件就会自动的清理内存，不需要我们手动去处理。</p><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><div class="btns rounded grid5">            <a class="button" href='https://huran.lanzout.com/imGOGy3xgri' title='蓝奏云'><i class='fas fa-download'></i>蓝奏云</a>          </div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="Windows" scheme="https://blog.huran.xyz/categories/Windows/"/>
    
    <category term="工具" scheme="https://blog.huran.xyz/categories/Windows/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Windows" scheme="https://blog.huran.xyz/tags/Windows/"/>
    
    <category term="工具" scheme="https://blog.huran.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="内存清理" scheme="https://blog.huran.xyz/tags/%E5%86%85%E5%AD%98%E6%B8%85%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 新建文章自动打开编辑器</title>
    <link href="https://blog.huran.xyz/post/60f1ef6d/"/>
    <id>https://blog.huran.xyz/post/60f1ef6d/</id>
    <published>2021-12-26T07:41:44.000Z</published>
    <updated>2021-12-26T08:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>转自<a href="https://www.sianx.com/">Sianx’s Blog</a><a href="https://www.sianx.com/posts/c32b6e4c/#Hexo%20%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8">《博客魔改记录》</a>仅用于记录和学习。</p><ol><li>在 HEXO 根目录下新建<code>scripts</code>文件夹</li><li>在<code>scripts</code>文件夹新建一个 js 文件，例如<code>new.js</code></li><li>在<code>new.js</code>中添加如下代码：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var spawn = require(&#x27;child_process&#x27;).exec</span><br><span class="line"></span><br><span class="line">hexo.on(&#x27;new&#x27;, function(data)&#123;</span><br><span class="line">  spawn(&#x27;start  &quot;D:\Program Files\Typora\Typora.exe&quot; &#x27; + data.path)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中<code>D:\Program Files\Typora\Typora.exe</code>改成你自己编辑器的绝对地址即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="Hexo" scheme="https://blog.huran.xyz/categories/Hexo/"/>
    
    <category term="教程" scheme="https://blog.huran.xyz/categories/Hexo/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://blog.huran.xyz/tags/Hexo/"/>
    
    <category term="教程" scheme="https://blog.huran.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="编辑器" scheme="https://blog.huran.xyz/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    <category term="文章" scheme="https://blog.huran.xyz/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>基于 Butterfly 主题的双栏卡片主页文章 css 样式</title>
    <link href="https://blog.huran.xyz/post/8728f55f/"/>
    <id>https://blog.huran.xyz/post/8728f55f/</id>
    <published>2021-12-26T05:41:44.000Z</published>
    <updated>2021-12-26T06:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><strong>转自</strong><a href="https://zfe.space/">小冰博客</a><a href="https://zfe.space/post/52914.html">《教程：基于 Butterfly 主题的双栏卡片主页文章 css 样式》</a><strong>仅用于学习。</strong></p><h3 id="步骤-1：调整文章图片布局"><a href="#步骤-1：调整文章图片布局" class="headerlink" title="步骤 1：调整文章图片布局"></a>步骤 1：调整文章图片布局</h3><p>首先你需要确保文章的图片位置为左侧布局。<br>打开主题配置文件，搜索封面顯示的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># the position of cover in home page (封面顯示的位置)</span><br><span class="line">  # left/right/both</span><br><span class="line">  position: left</span><br></pre></td></tr></table></figure><p>将 position 改为 left。<br>同时设置 hexo 的页面展示文章数首页文章数最好大于 20 篇。<br>目前已修复，不过最好多一点不然侧边栏会显得过长。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Home page setting</span><br><span class="line"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line">index_generator:</span><br><span class="line">  path: &#x27;&#x27;</span><br><span class="line">  per_page: 20</span><br><span class="line">  order_by: -date</span><br></pre></td></tr></table></figure><h3 id="步骤-2：接入-CSS"><a href="#步骤-2：接入-CSS" class="headerlink" title="步骤 2：接入 CSS"></a>步骤 2：接入 CSS</h3><p>打开主题配置文件<br>搜索到”inject:”设置处<br>原生添加以下代码或下载 css 从本地导入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-double-row-display@1.00/cardlistpost.css&quot;/&gt;</span><br><span class="line">  bottom:</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#recent-posts</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>:-<span class="number">1rem</span>;  <span class="comment">/*头部为空时抵消间隔，若有磁贴或日历请注释掉该行*/</span></span><br><span class="line">    <span class="attribute">align-content</span>:flex-start;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap; <span class="comment">/*规定灵活的项目在必要的时候拆行或拆列。*/</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-between; <span class="comment">/*。*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">  <span class="comment">/*max-height:324px;*/</span>  <span class="comment">/*文章容器最大高度*/</span></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1rem</span>; <span class="comment">/*最小间距*/</span></span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">height</span>:auto; <span class="comment">/*高度自动*/</span></span><br><span class="line">  <span class="attribute">width</span>:<span class="number">49%</span>;<span class="comment">/*文章容器容器宽度*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> <span class="selector-class">.post_cover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>; <span class="comment">/*图片封面宽度*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;<span class="comment">/*图片封面高度*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> <span class="selector-class">.post_cover</span> <span class="selector-tag">img</span><span class="selector-class">.post_bg</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;<span class="comment">/*图片宽度*/</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;<span class="comment">/*图片高度*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &gt;<span class="selector-class">.recent-post-info</span> &gt; <span class="selector-class">.content</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:none;<span class="comment">/*隐藏文章详情*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line"></span><br><span class="line">  -webkit-<span class="attribute">flex-direction</span>: column; <span class="comment">/*容器内部纵向排列*/</span></span><br><span class="line">  -ms-<span class="attribute">flex-direction</span>: column; <span class="comment">/*容器内部纵向排列*/</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: column; <span class="comment">/*容器内部纵向排列*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> <span class="selector-class">.left_radius</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span> <span class="number">8px</span> <span class="number">0</span> <span class="number">0</span>;<span class="comment">/*圆角修改*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> <span class="selector-class">.right_radius</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span> <span class="number">8px</span> <span class="number">0</span> <span class="number">0</span>;<span class="comment">/*圆角修改*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.recent-post-item</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:auto <span class="meta">!important</span>;<span class="comment">/*容器高度自动*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recent-post-info</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">40px</span>;<span class="comment">/*容器内部文字左右间距*/</span></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1em</span>;<span class="comment">/*容器内部文字上间距*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span><span class="meta">!important</span>;<span class="comment">/*容器宽度*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &gt; <span class="selector-class">.recent-post-info</span> &gt; <span class="selector-class">.article-title</span> &#123;</span><br><span class="line">    -webkit-line-clamp: <span class="number">1</span>;<span class="comment">/*控制标题的行数*/</span></span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0.3rem</span>; <span class="comment">/*控制标题的上间距*/</span></span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0.3rem</span>;<span class="comment">/*控制标题的下间距*/</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--text-highlight-color);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2em</span>; <span class="comment">/*控制标题的字体大小*/</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.4</span>;<span class="comment">/*控制标题的行高*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &gt;<span class="selector-class">.recent-post-info</span> &gt; <span class="selector-class">.article-meta-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;<span class="comment">/*控制标题meta信息的底部间距*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>:<span class="number">100%</span>;<span class="comment">/*控制手机自适应*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链接进入后，你会发现，布局神奇地变成了双栏布局。</p><h3 id="步骤-3：修改-pug"><a href="#步骤-3：修改-pug" class="headerlink" title="步骤 3：修改 pug"></a>步骤 3：修改 pug</h3><h4 id="原生主题用户"><a href="#原生主题用户" class="headerlink" title="原生主题用户"></a>原生主题用户</h4><p>如果你想让发布时间、分类、标签不在一行显示可以修改 pug。<br>打开”\themes\hexo-theme-butterfly\layout\includes\mixins\post-ui.pug”。<br>在__separator 和 i.fas 之间加上换行符 br。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">span.article-meta__separator</span><br><span class="line">br</span><br><span class="line">i.fas.fa-tag.article-meta__icon</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="Hexo" scheme="https://blog.huran.xyz/categories/Hexo/"/>
    
    <category term="教程" scheme="https://blog.huran.xyz/categories/Hexo/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://blog.huran.xyz/tags/Hexo/"/>
    
    <category term="教程" scheme="https://blog.huran.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="主题" scheme="https://blog.huran.xyz/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Vercel部署随机图API</title>
    <link href="https://blog.huran.xyz/post/be90eff1/"/>
    <id>https://blog.huran.xyz/post/be90eff1/</id>
    <published>2021-12-09T12:28:26.000Z</published>
    <updated>2021-12-25T12:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于随机图，大家应该知道，也有很多的公益随机图API。但里面的图片毕竟都是别人的，可能并不是自己想要的。但是部署随机图又需要服务器，毕竟是PHP动态。虽然一直听别人说Vercel可以部署动态。但自己毕竟小白一个，也不会，也不了解。机缘巧合下，在GitHub里看到一个仓库，他就是通过Vercel来部署的随机图。但是不能根据手机访问还是电脑访问来返回相应的图片，所以我也是加以修改，使其可以根据访问设备来返回PC图还是PE图。</p><p>缺点就是每月限流100G，不过对于个人使用可以说是完全的足够了。</p><h2 id="Let’s-start"><a href="#Let’s-start" class="headerlink" title="Let’s start"></a>Let’s start</h2><p>原项目地址：<a href="https://github.com/YieldRay/Random-Picture">YieldRay/Random-Picture: 随机图片api (github.com)</a></p><p>我自己修改后的项目地址：<a href="https://github.com/hurangit/vercel-img">hurangit/vercel-img (github.com)</a></p><p>快速部署，就将我修改后的项目地址<code>Fork</code>到自己的仓库，然后点击Deploy直接跳转到Vercel部署界面</p><h2 id="Velcer部署"><a href="#Velcer部署" class="headerlink" title="Velcer部署"></a>Velcer部署</h2><p>点击<a href="https://vercel.com/new/git/third-party">部署</a></p><p>选择你的登录方式</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211209205228.png" alt=""></p><p>登录成功后，输入我的仓库链接：<code>https://github.com/hurangit/vercel-img</code></p><p>Continue</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211209211905.png" alt=""></p><p>输入你想要创建的仓库名</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211209210613.png" alt=""></p><p>然后点击Create</p><p>等到部署完成</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211209210704.png" alt=""></p><p>出现一下页面，并显示部署成功，就可以了。点击Go to Dashboard</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211209210746.png" alt=""></p><p>这个就是你的API链接，现在开始访问吧！！</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211209210857.png" alt=""></p><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><p>恭喜你，现在连随机图API也能白嫖了！！</p><h1 id="公益API"><a href="#公益API" class="headerlink" title="公益API"></a>公益API</h1><p>这是本教程所搭建的随机图API：<a href="https://api.huran.xyz/api">https://api.huran.xyz/api</a></p><p>2021/12/25 20:31 由于jsd原因，国内访问变慢，现已将jsd加速的图片链接更改为知乎网宿节点的npm，保证其速度</p><p>具体图片和数量请看博客<a href="/photo/">相册</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="Vercel" scheme="https://blog.huran.xyz/categories/Vercel/"/>
    
    <category term="教程" scheme="https://blog.huran.xyz/categories/Vercel/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="教程" scheme="https://blog.huran.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Vercel" scheme="https://blog.huran.xyz/tags/Vercel/"/>
    
    <category term="Github" scheme="https://blog.huran.xyz/tags/Github/"/>
    
    <category term="随机图" scheme="https://blog.huran.xyz/tags/%E9%9A%8F%E6%9C%BA%E5%9B%BE/"/>
    
    <category term="API" scheme="https://blog.huran.xyz/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>利用Windows系统Bug创建加密文件夹</title>
    <link href="https://blog.huran.xyz/post/99c5a280/"/>
    <id>https://blog.huran.xyz/post/99c5a280/</id>
    <published>2021-12-07T08:27:08.000Z</published>
    <updated>2021-12-07T09:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>windows文件夹命名不能存在特殊符号，但是可以通过CMD命令来进行非法的命名。</p><p>在windows系统当中<code>..\</code>被解释成返回上一级目录，也就是说如果你的文件夹名字是这个，那就会形成以下特点</p><ul><li>无法打开</li><li>无法复制</li><li>无法移动</li><li>无法删除</li><li>占用始终显示0字节</li></ul><p>具体如下图</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211207165354.png" alt=""></p><p>已经过测试的系统</p><ul><li>Windows7   64位</li><li>Windows10 64位</li><li>Windows11 64位</li></ul><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>在你想要创建加密文件夹的目录下运行CMD（非Winodws Powershell）</p><p>创建名称为<code>test</code>的文件夹</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">md</span> test..\ </span><br></pre></td></tr></table></figure><p>打开名称为<code>test</code>的文件夹</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">start</span> test~<span class="number">1</span></span><br></pre></td></tr></table></figure><p>删除名称为<code>test</code>的文件夹</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rd</span> test..\</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>关于文件夹的名字是有要求的，仅可设置为2-3汉字，3-6字母，否则就会无法打开文件夹的。</p><p>删除时需要将文件夹内的东西全部删除后，才可删除文件夹。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="Windows" scheme="https://blog.huran.xyz/categories/Windows/"/>
    
    <category term="教程" scheme="https://blog.huran.xyz/categories/Windows/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="教程" scheme="https://blog.huran.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Windows" scheme="https://blog.huran.xyz/tags/Windows/"/>
    
    <category term="Bug" scheme="https://blog.huran.xyz/tags/Bug/"/>
    
    <category term="加密文件夹" scheme="https://blog.huran.xyz/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    
  </entry>
  
  <entry>
    <title>Hexo在宝塔安装Hexo博客+butterfly主题</title>
    <link href="https://blog.huran.xyz/post/3aede2af/"/>
    <id>https://blog.huran.xyz/post/3aede2af/</id>
    <published>2021-12-05T05:41:44.000Z</published>
    <updated>2021-12-05T12:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>hexo博客应该不陌生，大多数人都是选择使用github来进行搭建，这样子也可以白嫖博客。但是总有人想要在服务器搭建（emm..就是我）。所以就有这一篇教程。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>其实跟用github搭建是一样的原理，就是将上传的服务器从github更换为了你的服务器。需要在你的服务器上面搭建一个git仓库。很简单</p><h2 id="搭建本地Hexo"><a href="#搭建本地Hexo" class="headerlink" title="搭建本地Hexo"></a>搭建本地Hexo</h2><p>首先我们搭建本地的Hexo博客</p><p>环境要求（注意配置好nodejs的环境配置）</p><ul><li>Nodejs（<a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">安装教程</a>）</li><li>Git（<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">安装教程</a>）</li></ul><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>首先创建一个你想要放置博客的目录，例如:<code>D:\hexoblog</code></p><p>然后在这个目录内右键-Git Bash Here，会弹出bash窗口，如下图</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205135650.png" alt=""></p><p>输入安装hexo代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g <span class="comment"># 安装Hexo</span></span><br></pre></td></tr></table></figure><p>等待安装完成，如下图（我市已经安装过了，所以运行这个命令属于是更新）</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205135939.png" alt=""></p><p>安装完成后，继续执行hexo的初始化命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="comment"># 初始化hexo</span></span><br></pre></td></tr></table></figure><p>期间可能会出错，如图：</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205140218.png" alt=""></p><p>这是由于连接github失败所导致的，因为github是国外网站，所以出错是正常的，反复的执行命令即可。</p><p>等待初始化完成后目录里就会多出很多文件，这就是hexo的文件。</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205141246.png" alt=""></p><p>初始化成功会显示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure><p>接下来生成静态文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>生成完毕后开启本地服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205141511.png" alt=""></p><h2 id="生成key"><a href="#生成key" class="headerlink" title="生成key"></a>生成key</h2><p>这一步跟github搭建是一样的需要一个key</p><h5 id="定义邮箱-更换为你的邮箱地址就行"><a href="#定义邮箱-更换为你的邮箱地址就行" class="headerlink" title="定义邮箱(更换为你的邮箱地址就行)"></a>定义邮箱(更换为你的邮箱地址就行)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;youemail&quot;</span></span><br></pre></td></tr></table></figure><h5 id="定义名称-更换自定义一个名称就行"><a href="#定义名称-更换自定义一个名称就行" class="headerlink" title="定义名称(更换自定义一个名称就行)"></a>定义名称(更换自定义一个名称就行)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;huran&quot;</span><br></pre></td></tr></table></figure><h5 id="生成ssh-公钥"><a href="#生成ssh-公钥" class="headerlink" title="生成ssh 公钥"></a>生成ssh 公钥</h5><p>在电脑桌面右击，点击Git Bash Here打开命令行终端，执行如下命令（直接按三次回车生成密钥）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>生成的文件默认在~/.ssh目录中，看到有id_rsa，id_rsa.pub这些文件即可， Win10中就是 我的电脑/C盘/用户/你自己的用户名/.ssh/ 就可以看到了，别问为啥，后期我们会用到。</p><h2 id="安装butterfly主题"><a href="#安装butterfly主题" class="headerlink" title="安装butterfly主题"></a>安装butterfly主题</h2><p>官方文档：<a href="https://butterfly.js.org/"><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安裝文檔(一) 快速開始 | Butterfly</a></a></p><p>参考官方文档使用npm安装方式进行安装，这里就不做过多的介绍了，文档里描述的很详细</p><h2 id="服务器搭建git仓库"><a href="#服务器搭建git仓库" class="headerlink" title="服务器搭建git仓库"></a>服务器搭建git仓库</h2><p>首先添加站点，PHP版本选择纯静态，其余的默认即可</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205141808.png" alt=""></p><p>创建完成后设置站点的配置文件，将root这一栏更改为 /var/hexo; 如下图：</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205142046.png" alt=""></p><p>设置完后保存即可。</p><p>接下来部署仓库，ssh连接到你的服务器</p><h5 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><h5 id="创建Git账户"><a href="#创建Git账户" class="headerlink" title="创建Git账户"></a>创建Git账户</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure><h5 id="添加账户权限"><a href="#添加账户权限" class="headerlink" title="添加账户权限"></a>添加账户权限</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>找到<br>Allow root to run any commands anywhere<br>root ALL=(ALL) ALL</p><p>添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><p>保存退出(按 Esc 键退出编辑模式，输入”:wq” 保存退出)并改回权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure><h5 id="设置git账户密码"><a href="#设置git账户密码" class="headerlink" title="设置git账户密码"></a>设置git账户密码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure><p>切换至git用户，创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>然后将前面本地电脑中生成的id_rsa.pub文件中的公钥复制到authorized_keys</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br><span class="line">chmod 700 /home/git/.ssh</span><br></pre></td></tr></table></figure><p>在本地Git终端中测试是否能免密登录git，其中下面SERVER为填写自己的云主机IP一定替换过来，执行输入yes后不用密码就说明好了（KK这里没有免密成功但是不影响使用，你如果也没有可以放弃直接下一步步骤，反正我这边暂时找不到原因放弃了只是后期需要输入密码，不过还行也就1秒钟的事情，嫌麻烦的可以自己想办法解决一下）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@SERVER</span><br></pre></td></tr></table></figure><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>repo作为为Git仓库目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/repo</span><br><span class="line">chown -R git:git /var/repo</span><br><span class="line">chmod -R 755 /var/repo</span><br></pre></td></tr></table></figure><h5 id="hexo作为网站根目录"><a href="#hexo作为网站根目录" class="headerlink" title="hexo作为网站根目录"></a>hexo作为网站根目录</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www</span><br><span class="line">mkdir /var/www/hexo</span><br><span class="line">chown -R git:git /var/hexo</span><br><span class="line">chmod -R 755 /var/hexo</span><br></pre></td></tr></table></figure><h5 id="然后创建一个裸的-Git-仓库-返回root目录创建。"><a href="#然后创建一个裸的-Git-仓库-返回root目录创建。" class="headerlink" title="然后创建一个裸的 Git 仓库,返回root目录创建。"></a>然后创建一个裸的 Git 仓库,返回root目录创建。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">cd /var/repo</span><br><span class="line">git init --bare hexo.git</span><br></pre></td></tr></table></figure><p>创建一个新的 Git 钩子，用于自动部署 在 /var/repo/hexo.git 下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>按 i 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># !/bin/bash</span><br><span class="line"></span><br><span class="line">git --work-tree=/var/hexo --git-dir=/var/repo/hexo.git checkout -f</span><br></pre></td></tr></table></figure><p>然后，按 Esc 键退出编辑模式，输入”:wq” 保存退出。</p><p>修改文件权限，使得其可执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /var/repo/hexoBlog.git/hooks/post-receive</span><br><span class="line">chmod +x /var/repo/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>到这里，我们的 Git 仓库算是完全搭建好了</p><h2 id="上传服务器"><a href="#上传服务器" class="headerlink" title="上传服务器"></a>上传服务器</h2><p>打开你本地的博客根目录，打开_config.yml，找到deploy，更换SERVER为你的域名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@SERVER:/var/repo/hexo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>保存</p><p>在博客根目录打开Git Bash Here，上传至服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>我在部署过程中，执行 hexo d发现部署老是出错，什么权限不允许之类的，这里我们需要检查我们在上述的git操作部署是否使用了git用户操作，若是没有，需要给相应的目录更改用户组 使用.</p><p>我们需要给权限输入下方命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /var/repo/</span><br></pre></td></tr></table></figure><p>这条命令递归的将repo目录及其子目录用户组设置为git。同时使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /var/www/hexo</span><br></pre></td></tr></table></figure><p>这样即可解决此类问题。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>有任何的问题留言即可。因为这边文章是我边部署边写的，中间出现的问题很少，基本没有报错的出现，所以无法规避你们的错误。如果遇到问题可以留言咨询。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="Hexo" scheme="https://blog.huran.xyz/categories/Hexo/"/>
    
    <category term="教程" scheme="https://blog.huran.xyz/categories/Hexo/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://blog.huran.xyz/tags/Hexo/"/>
    
    <category term="教程" scheme="https://blog.huran.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="主题" scheme="https://blog.huran.xyz/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>利用Hexo-abbrlink插件生成唯一文章链接</title>
    <link href="https://blog.huran.xyz/post/16808/"/>
    <id>https://blog.huran.xyz/post/16808/</id>
    <published>2021-12-05T02:23:08.000Z</published>
    <updated>2021-12-05T12:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo的默认文章链接格式是年，月，日，标题这种格式来生成的。如果你的标题是中文的话，那你的URL链接就会包含中文，生成的链接如下图</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205103011.png" alt=""></p><p>复制后的URL路径就是把中文变成了一大堆字符串编码，如果你在其他地方用这边文章的url链接，偶然你又修改了改文章的标题，那这个URL链接就会失效。为了给每一篇文章来上一个属于自己的链接，写下此教程，利用<code>hexo-abbrlink</code>插件，A Hexo plugin to generate static post link based on post titles,来解决这个问题。 参考github官方： <a href="https%3A//github.com/Rozbo/hexo-abbrlink">hexo-abbrlink</a> 按照此教程配置完之后如下：</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205103230.png" alt=""></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在Hexo根目录安装插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>插件安装成功后，修改根目录的配置文件<code>_config.yml</code>找到<code>permalink</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="comment">#修改为</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">post/:abbrlink.html</span> <span class="comment"># post为自定义前缀</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">    <span class="attr">alg:</span> <span class="string">crc32</span>   <span class="comment">#算法： crc16(default) and crc32</span></span><br><span class="line">    <span class="attr">rep:</span> <span class="string">hex</span>     <span class="comment">#进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure><p>有两种设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alg -- Algorithm (currently support crc16 and crc32, which crc16 is default)</span><br><span class="line">rep -- Represent (the generated link could be presented in hex or dec value)</span><br></pre></td></tr></table></figure><p>crc16的最大数值为65535。如果一个缩写的链接已经存在，它会更改成另一个，并一次又一次地尝试…所以推荐使用crc32</p><h2 id="样本"><a href="#样本" class="headerlink" title="样本"></a>样本</h2><p>生成的链接将如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https://blog.huran.xyz/posts/66c8.html</span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https://blog.huran.xyz/posts/65535.html</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crc32 &amp; hex</span><br><span class="line">https://blog.huran.xyz/posts/8ddf18fb.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https://blog.huran.xyz/posts/1690090958.html</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>一切修改完毕后，清理本地的文件<code>hexo clean</code>，然后重新生成<code>hexo g</code></p><p>然后找到你的文章打开，该插件会在每篇文章的开头增加内容，如下图：</p><p><img src="https://unpkg.zhimg.com/hexo-img-post/20211205104638.png" alt=""></p><p>预览一下<code>hexo s</code>，访问一下你的本地连接查看成果吧。</p><p>没问题就可以上传<code>hexo d</code>使用了</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>欢迎收藏和转发，感谢你的支持！(๑•̀ㅂ•́) ✧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="Hexo" scheme="https://blog.huran.xyz/categories/Hexo/"/>
    
    <category term="教程" scheme="https://blog.huran.xyz/categories/Hexo/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://blog.huran.xyz/tags/Hexo/"/>
    
    <category term="教程" scheme="https://blog.huran.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="文章" scheme="https://blog.huran.xyz/tags/%E6%96%87%E7%AB%A0/"/>
    
    <category term="链接格式" scheme="https://blog.huran.xyz/tags/%E9%93%BE%E6%8E%A5%E6%A0%BC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>通过Python脚本获得Typora正版授权</title>
    <link href="https://blog.huran.xyz/post/27145/"/>
    <id>https://blog.huran.xyz/post/27145/</id>
    <published>2021-12-04T07:56:56.000Z</published>
    <updated>2021-12-04T12:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>11月23日，Typora 正式发布 1.0 版本，进入了收费时代。<br>1.0 版本是一次性付费而非订阅的，只要支付人民币 89 元，可以在 3 台设备里使用。</p><h2 id="Typora之于我"><a href="#Typora之于我" class="headerlink" title="Typora之于我"></a>Typora之于我</h2><p>也是刚接触博客的搭建，第一次使用的是Wordpress博客。但是总觉的太过简洁，没有好看的主题就放弃了。后来通过朋友接触到了Hexo框架，直接吸引到了我。好处就是静态的Html页面带来极快浏览速度，而不好的地方也是显而易见。并没有Wordpress的后台管理，文章管理，也就是说写文章是需要用到Markdown的。这对于新手就是完全的不友好了，而我接触到的第一款Markdown编辑器就是Typora，用它的原因也很简单。</p><ul><li>轻盈、干净</li><li>所见即所得</li><li>图床</li><li>主题、生态</li></ul><p>曾经的免费软件，如今也进入收费阶段，不乏使用者被迫迁移至其他写作工具上。</p><h2 id="敬告"><a href="#敬告" class="headerlink" title="敬告"></a>敬告</h2><p><strong>请勿使用盗版，支持正版授权。</strong><br><strong>文中内容仅作学习和讨论，请不要从事任何非法行为。</strong><br><strong>由此产生的任何问题都将读者/用户（您）承担。</strong></p><h2 id="Begin"><a href="#Begin" class="headerlink" title="Begin"></a>Begin</h2><ol><li>下载所需要的代码文件(typoraCracker)</li></ol><div class="btns rounded grid5">            <a class="button" href='https://wwa.lanzouo.com/i9WV9x8f56h' title='蓝奏云'><i class='fas fa-download'></i>蓝奏云</a>          </div><p>下载完成后解压到任意位置得到typoraCracker文件夹</p><ol><li>环境配置</li></ol><ul><li>Python（<a href="https://blog.csdn.net/qq_34120459/article/details/86425559">教程</a>）</li><li>Node.js（<a href="https://blog.csdn.net/cai454692590/article/details/86093297">教程</a>）</li></ul><p>注意：python不要开虚拟环境</p><ol><li>安装依赖</li></ol><p>在<code>typoraCracker</code>文件夹内打开<code>Powershell</code>窗口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">python typora.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 测试是否安装完成</span></span><br></pre></td></tr></table></figure><p>安装成功则会显示下图。<br><img src="https://img.huran.xyz/post/shell.png" alt="成功示意图"></p><ol><li>确认位置</li></ol><p>寻找<code>Typora</code>安装文件夹，并找到<code>app.asar</code>文件<br>默认位置为<code>C:\Program Files\Typora\resources\app.asar</code></p><ol><li>解包更换</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python typora.py  <span class="string">&quot;C:\Program Files\Typora\resources\app.asar&quot;</span> outfile/</span><br><span class="line"><span class="comment"># 将asar文件解包</span></span><br><span class="line">Copy-Item example/patch/License.js outfile/dec_app</span><br><span class="line"><span class="comment"># 复制并替换license文件</span></span><br><span class="line">python typora.py -u outfile/dec_app outfile/</span><br><span class="line"><span class="comment"># 重新打包asar文件</span></span><br><span class="line">node example/keygen.js</span><br><span class="line"><span class="comment"># 获取 key 一会用来激活代码呆这里</span></span><br></pre></td></tr></table></figure><p>注意<code>key</code>后续激活需要用到</p><ol><li>备份替换</li></ol><p>将原版<code>app.asar</code>改为<code>app.asar.bak</code>备份<br>将<code>outfile</code>文件夹内的<code>app.asar</code>粘贴到<code>C:\Program Files\Typora\resources\</code></p><ol><li>激活</li></ol><p>打开 <code>typora</code> 输入第5步中的<code>key</code>，邮箱随意。</p><h2 id="Enjoy"><a href="#Enjoy" class="headerlink" title="Enjoy"></a>Enjoy</h2><p><img src="https://img.huran.xyz/post/typoracreak.png" alt="typora激活成功.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="Hexo" scheme="https://blog.huran.xyz/categories/Hexo/"/>
    
    <category term="教程" scheme="https://blog.huran.xyz/categories/Hexo/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://blog.huran.xyz/tags/Hexo/"/>
    
    <category term="教程" scheme="https://blog.huran.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="编辑器" scheme="https://blog.huran.xyz/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    <category term="Markdown" scheme="https://blog.huran.xyz/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.huran.xyz/post/16107/"/>
    <id>https://blog.huran.xyz/post/16107/</id>
    <published>2021-11-28T12:28:26.000Z</published>
    <updated>2021-11-28T12:29:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="Hexo" scheme="https://blog.huran.xyz/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://blog.huran.xyz/tags/Hexo/"/>
    
  </entry>
  
</feed>
